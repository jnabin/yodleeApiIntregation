// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YodleeIntegration.Persistence.DbContexts;

namespace YodleeIntegration.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AccessTokens", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("YodleeAccessTokens");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Account", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountStatus")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<string>("AggregationSource")
                        .HasColumnType("text");

                    b.Property<long?>("AmountDueEntityId")
                        .HasColumnType("bigint");

                    b.Property<double?>("AnnualPercentageYield")
                        .HasColumnType("double precision");

                    b.Property<double?>("Apr")
                        .HasColumnType("double precision");

                    b.Property<long?>("AvailableBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvailableCashEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvailableCreditEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<double?>("CashApr")
                        .HasColumnType("double precision");

                    b.Property<long?>("CashEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayedName")
                        .HasColumnType("text");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<bool>("IncludeInNetWorth")
                        .HasColumnType("boolean");

                    b.Property<double?>("InterestRate")
                        .HasColumnType("double precision");

                    b.Property<string>("InterestRateType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsset")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastEmployeeContributionAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastEmployeeContributionDate")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastPaymentAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastPaymentDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("MarginBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaturityDate")
                        .HasColumnType("text");

                    b.Property<long?>("MinimumAmountDueEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginalLoanAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginationDate")
                        .HasColumnType("text");

                    b.Property<long?>("PrincipalBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<long?>("RunningBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalCashLimitEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalCreditLineEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VerifyAccountDTOEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("YodleeAccountId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.HasIndex("AmountDueEntityId");

                    b.HasIndex("AvailableBalanceEntityId");

                    b.HasIndex("AvailableCashEntityId");

                    b.HasIndex("AvailableCreditEntityId");

                    b.HasIndex("BalanceEntityId");

                    b.HasIndex("CashEntityId");

                    b.HasIndex("CurrentBalanceEntityId");

                    b.HasIndex("LastEmployeeContributionAmountEntityId");

                    b.HasIndex("LastPaymentAmountEntityId");

                    b.HasIndex("MarginBalanceEntityId");

                    b.HasIndex("MinimumAmountDueEntityId");

                    b.HasIndex("OriginalLoanAmountEntityId");

                    b.HasIndex("PrincipalBalanceEntityId");

                    b.HasIndex("RunningBalanceEntityId");

                    b.HasIndex("TotalCashLimitEntityId");

                    b.HasIndex("TotalCreditLineEntityId");

                    b.HasIndex("VerifyAccountDTOEntityId");

                    b.ToTable("YodleeAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AccountBalance", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<long?>("AvailableBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FailedReason")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<string>("RefreshStatus")
                        .HasColumnType("text");

                    b.Property<long?>("TotalBalanceEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("AvailableBalanceEntityId");

                    b.HasIndex("BalanceEntityId");

                    b.HasIndex("CashEntityId");

                    b.HasIndex("CurrentBalanceEntityId");

                    b.HasIndex("TotalBalanceEntityId");

                    b.ToTable("AccountBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AddManualAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("AddressEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AmountDueEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<long?>("HomeValueEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("IncludeInNetWorth")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("ValuationType")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("AddressEntityId");

                    b.HasIndex("AmountDueEntityId");

                    b.HasIndex("BalanceEntityId");

                    b.HasIndex("HomeValueEntityId");

                    b.ToTable("AddManualAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AddManualResponseAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("YodleeAddManualResponseAccountId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("AddManualResponseAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Address", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("Address3")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfileEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("ProfileEntityId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AssetClassification", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Allocation")
                        .HasColumnType("integer");

                    b.Property<string>("ClassificationType")
                        .HasColumnType("text");

                    b.Property<string>("ClassificationValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("HoldingEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("HoldingEntityId");

                    b.ToTable("AssetClassifications");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AssetClassificationList", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClassificationType")
                        .HasColumnType("text");

                    b.Property<List<string>>("ClassificationValue")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.ToTable("AssetClassificationLists");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Attribute", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("Container")
                        .HasColumnType("text[]");

                    b.Property<long?>("ContainerAttributesEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FromDate")
                        .HasColumnType("text");

                    b.Property<string>("FromFinYear")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProvidersDatasetEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ToDate")
                        .HasColumnType("text");

                    b.Property<string>("ToFinYear")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("ContainerAttributesEntityId");

                    b.HasIndex("ProvidersDatasetEntityId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Bank", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<string>>("FullAccountNumberFields")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfTransactionDays")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.BankTransferCode", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractAccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long?>("VerifiedAccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("YodleeBankTransferCodeId")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("AccountEntityId");

                    b.HasIndex("DataExtractAccountEntityId");

                    b.HasIndex("VerifiedAccountEntityId");

                    b.ToTable("BankTransferCodes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Capability", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("Container")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProviderEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("ProviderEntityId");

                    b.ToTable("Capabilities");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.CardDetail", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<string>>("FullAccountNumberFields")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfTransactionDays")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("CardDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Contact", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ContainerAttribute", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("BANKEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CREDITCARDEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("INSURANCEEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("INVESTMENTEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long?>("LOANEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("BANKEntityId");

                    b.HasIndex("CREDITCARDEntityId");

                    b.HasIndex("INSURANCEEntityId");

                    b.HasIndex("INVESTMENTEntityId");

                    b.HasIndex("LOANEntityId");

                    b.ToTable("ContainerAttributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Coordinates", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Latitude")
                        .HasColumnType("integer");

                    b.Property<int>("Longitude")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Coverage", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractAccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EndDate")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlanType")
                        .HasColumnType("text");

                    b.Property<string>("StartDate")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("DataExtractAccountEntityId");

                    b.ToTable("Coverages");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Data", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FromDate")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ToDate")
                        .HasColumnType("text");

                    b.Property<int>("UserCount")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("Datas");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountStatus")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<long?>("AddressEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregationSource")
                        .HasColumnType("text");

                    b.Property<long?>("AmountDueEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("AnnualPercentageYield")
                        .HasColumnType("integer");

                    b.Property<long?>("AnnuityBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("Apr")
                        .HasColumnType("integer");

                    b.Property<List<int>>("AssociatedProviderAccountId")
                        .HasColumnType("integer[]");

                    b.Property<long?>("AvailableBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvailableCashEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvailableCreditEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("CashApr")
                        .HasColumnType("integer");

                    b.Property<long?>("CashEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashValueEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<string>("Collateral")
                        .HasColumnType("text");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentLevel")
                        .HasColumnType("text");

                    b.Property<long?>("DataExtractUserDataEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeathBenefitEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DerivedApr")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayedName")
                        .HasColumnType("text");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<string>("EnrollmentDate")
                        .HasColumnType("text");

                    b.Property<long?>("EscrowBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EstimatedDate")
                        .HasColumnType("text");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("text");

                    b.Property<long?>("FaceAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<string>("Guarantor")
                        .HasColumnType("text");

                    b.Property<string>("HomeInsuranceType")
                        .HasColumnType("text");

                    b.Property<long?>("HomeValueEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IncludeInNetWorth")
                        .HasColumnType("boolean");

                    b.Property<long?>("InterestPaidLastYearEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InterestPaidYTDEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("InterestRate")
                        .HasColumnType("integer");

                    b.Property<string>("InterestRateType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsset")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastEmployeeContributionAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastEmployeeContributionDate")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastPaymentAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastPaymentDate")
                        .HasColumnType("text");

                    b.Property<long?>("LastPaymentEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Lender")
                        .HasColumnType("text");

                    b.Property<string>("LifeInsuranceType")
                        .HasColumnType("text");

                    b.Property<string>("LoanPayByDate")
                        .HasColumnType("text");

                    b.Property<long?>("LoanPayoffAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LoanPayoffDetailsEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MarginBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MaturityAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaturityDate")
                        .HasColumnType("text");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<long?>("MinimumAmountDueEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MoneyMarketBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("NextLevel")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("OauthMigrationStatus")
                        .HasColumnType("text");

                    b.Property<long?>("OriginalLoanAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginationDate")
                        .HasColumnType("text");

                    b.Property<long?>("OverDraftLimitEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PolicyEffectiveDate")
                        .HasColumnType("text");

                    b.Property<string>("PolicyFromDate")
                        .HasColumnType("text");

                    b.Property<string>("PolicyStatus")
                        .HasColumnType("text");

                    b.Property<string>("PolicyTerm")
                        .HasColumnType("text");

                    b.Property<string>("PolicyToDate")
                        .HasColumnType("text");

                    b.Property<long?>("PremiumEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PremiumPaymentTerm")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryRewardUnit")
                        .HasColumnType("text");

                    b.Property<long?>("PrincipalBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<long?>("RecurringPaymentEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RemainingBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("RepaymentPlanType")
                        .HasColumnType("text");

                    b.Property<long?>("RunningBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShortBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceAccountStatus")
                        .HasColumnType("text");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<int>("SourceProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Term")
                        .HasColumnType("text");

                    b.Property<long?>("TotalCashLimitEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalCreditLimitEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalCreditLineEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalUnvestedBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalVestedBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserClassification")
                        .HasColumnType("text");

                    b.Property<string>("ValuationType")
                        .HasColumnType("text");

                    b.Property<long>("YodleeDataExtractsAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("_401kLoanEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("AddressEntityId");

                    b.HasIndex("AmountDueEntityId");

                    b.HasIndex("AnnuityBalanceEntityId");

                    b.HasIndex("AvailableBalanceEntityId");

                    b.HasIndex("AvailableCashEntityId");

                    b.HasIndex("AvailableCreditEntityId");

                    b.HasIndex("BalanceEntityId");

                    b.HasIndex("CashEntityId");

                    b.HasIndex("CashValueEntityId");

                    b.HasIndex("CurrentBalanceEntityId");

                    b.HasIndex("DataExtractUserDataEntityId");

                    b.HasIndex("DeathBenefitEntityId");

                    b.HasIndex("EscrowBalanceEntityId");

                    b.HasIndex("FaceAmountEntityId");

                    b.HasIndex("HomeValueEntityId");

                    b.HasIndex("InterestPaidLastYearEntityId");

                    b.HasIndex("InterestPaidYTDEntityId");

                    b.HasIndex("LastEmployeeContributionAmountEntityId");

                    b.HasIndex("LastPaymentAmountEntityId");

                    b.HasIndex("LastPaymentEntityId");

                    b.HasIndex("LoanPayoffAmountEntityId");

                    b.HasIndex("LoanPayoffDetailsEntityId");

                    b.HasIndex("MarginBalanceEntityId");

                    b.HasIndex("MaturityAmountEntityId");

                    b.HasIndex("MinimumAmountDueEntityId");

                    b.HasIndex("MoneyMarketBalanceEntityId");

                    b.HasIndex("OriginalLoanAmountEntityId");

                    b.HasIndex("OverDraftLimitEntityId");

                    b.HasIndex("PremiumEntityId");

                    b.HasIndex("PrincipalBalanceEntityId");

                    b.HasIndex("RecurringPaymentEntityId");

                    b.HasIndex("RemainingBalanceEntityId");

                    b.HasIndex("RunningBalanceEntityId");

                    b.HasIndex("ShortBalanceEntityId");

                    b.HasIndex("TotalCashLimitEntityId");

                    b.HasIndex("TotalCreditLimitEntityId");

                    b.HasIndex("TotalCreditLineEntityId");

                    b.HasIndex("TotalUnvestedBalanceEntityId");

                    b.HasIndex("TotalVestedBalanceEntityId");

                    b.HasIndex("_401kLoanEntityId");

                    b.ToTable("DataExtractAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractDataset", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdditionalStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractAccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractProviderAccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdateAttempt")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NextUpdateScheduled")
                        .HasColumnType("text");

                    b.Property<string>("UpdateEligibility")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("DataExtractAccountEntityId");

                    b.HasIndex("DataExtractProviderAccountEntityId");

                    b.ToTable("DataExtractDatasets");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractProviderAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AggregationSource")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractUserDataEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DestinationProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("OauthMigrationStatus")
                        .HasColumnType("text");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<List<int>>("SourceProviderAccountIds")
                        .HasColumnType("integer[]");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<long>("YodleeDataExtractsProviderAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("DataExtractUserDataEntityId");

                    b.ToTable("DataExtractProviderAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractUser", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginName")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("DataExtractUsers");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractUserData", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalTransactionsCount")
                        .HasColumnType("integer");

                    b.Property<long?>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("DataEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("DataExtractUserDatas");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataSet", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("AdditionalStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateAttempt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextUpdateScheduled")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ProviderAccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateEligibility")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("AccountEntityId");

                    b.HasIndex("ProviderAccountEntityId");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Description", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Consumer")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Original")
                        .HasColumnType("text");

                    b.Property<string>("Security")
                        .HasColumnType("text");

                    b.Property<string>("Simple")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DetailCategory", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DetailCategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("TransactionCategoryEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("TransactionCategoryEntityId");

                    b.ToTable("DetailCategories");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Email", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfileEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("ProfileEntityId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Event", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("dataEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("info")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("dataEntityId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Field", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValueProvided")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<int>("MinLength")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<long?>("RowEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Suffix")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<bool>("ValueEditable")
                        .HasColumnType("boolean");

                    b.Property<int>("YodleeFieldId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.HasIndex("RowEntityId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.FullAccountNumberList", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("UnmaskedAccountNumber")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("FullAccountNumberLists");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("YoldeeHistoricalAccountId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("HistoricalAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalBalance", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("AsOfDate")
                        .HasColumnType("text");

                    b.Property<long?>("BalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DataSourceType")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsset")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetworthDetailEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("BalanceEntityId");

                    b.HasIndex("NetworthDetailEntityId");

                    b.ToTable("HistoricalBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalBalanceAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AsOfDate")
                        .HasColumnType("text");

                    b.Property<long?>("BalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DataSourceType")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("HistoricalAccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsset")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("BalanceEntityId");

                    b.HasIndex("HistoricalAccountEntityId");

                    b.ToTable("HistoricalBalanceAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holder", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NameEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Ownership")
                        .HasColumnType("text");

                    b.Property<long?>("VerifiedAccountEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("NameEntityId");

                    b.HasIndex("VerifiedAccountEntityId");

                    b.ToTable("Holders");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holding", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long?>("AccruedIncomeEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AccruedInterestEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("ContractQuantity")
                        .HasColumnType("integer");

                    b.Property<long?>("CostBasisEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("CouponRate")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CusipNumber")
                        .HasColumnType("text");

                    b.Property<long?>("DataExtractUserDataEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EnrichedDescription")
                        .HasColumnType("text");

                    b.Property<int>("ExercisedQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("text");

                    b.Property<string>("GrantDate")
                        .HasColumnType("text");

                    b.Property<string>("HoldingType")
                        .HasColumnType("text");

                    b.Property<long?>("HoldingsSummaryEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("InterestRate")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShort")
                        .HasColumnType("boolean");

                    b.Property<string>("Isin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("MatchStatus")
                        .HasColumnType("text");

                    b.Property<string>("MaturityDate")
                        .HasColumnType("text");

                    b.Property<string>("OptionType")
                        .HasColumnType("text");

                    b.Property<long?>("PriceEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStyle")
                        .HasColumnType("text");

                    b.Property<string>("SecurityType")
                        .HasColumnType("text");

                    b.Property<string>("Sedol")
                        .HasColumnType("text");

                    b.Property<long?>("SpreadEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StrikePriceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<string>("Term")
                        .HasColumnType("text");

                    b.Property<int>("UnvestedQuantity")
                        .HasColumnType("integer");

                    b.Property<long?>("UnvestedValueEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("VestedQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("VestedSharesExercisable")
                        .HasColumnType("integer");

                    b.Property<long?>("VestedValueEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("VestingDate")
                        .HasColumnType("text");

                    b.Property<int>("YodleeHoldingId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.HasIndex("AccruedIncomeEntityId");

                    b.HasIndex("AccruedInterestEntityId");

                    b.HasIndex("CostBasisEntityId");

                    b.HasIndex("DataExtractUserDataEntityId");

                    b.HasIndex("HoldingsSummaryEntityId");

                    b.HasIndex("PriceEntityId");

                    b.HasIndex("SpreadEntityId");

                    b.HasIndex("StrikePriceEntityId");

                    b.HasIndex("UnvestedValueEntityId");

                    b.HasIndex("ValueEntityId");

                    b.HasIndex("VestedValueEntityId");

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingType", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("holdingType")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("HoldingTypes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("HoldingsSummaryEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("YodleeDerivedHoldingsAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("HoldingsSummaryEntityId");

                    b.HasIndex("ValueEntityId");

                    b.ToTable("HoldingsAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsSummary", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClassificationType")
                        .HasColumnType("text");

                    b.Property<string>("ClassificationValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("ValueEntityId");

                    b.ToTable("HoldingsSummarys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Identifier", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("HolderEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfileEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("HolderEntityId");

                    b.HasIndex("ProfileEntityId");

                    b.ToTable("Identifiers");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Intermediary", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IntermediaryValue")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("TransactionEntityId");

                    b.ToTable("YodleeIntermediary");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Link", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Href")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodType")
                        .HasColumnType("text");

                    b.Property<string>("Rel")
                        .HasColumnType("text");

                    b.Property<long?>("UserDataEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("UserDataEntityId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoanPayoffDetails", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OutstandingBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PayByDate")
                        .HasColumnType("text");

                    b.Property<long?>("PayoffAmountEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("OutstandingBalanceEntityId");

                    b.HasIndex("PayoffAmountEntityId");

                    b.ToTable("LoanPayoffDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoginForm", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ForgetPasswordURL")
                        .HasColumnType("text");

                    b.Property<string>("FormType")
                        .HasColumnType("text");

                    b.Property<string>("Help")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginHelp")
                        .HasColumnType("text");

                    b.Property<string>("MfaInfoText")
                        .HasColumnType("text");

                    b.Property<string>("MfaInfoTitle")
                        .HasColumnType("text");

                    b.Property<int>("MfaTimeout")
                        .HasColumnType("integer");

                    b.Property<long?>("ProviderAccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProviderEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("YodleeLoginFormId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.HasIndex("ProviderAccountEntityId");

                    b.HasIndex("ProviderEntityId");

                    b.ToTable("LoginForms");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Merchant", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AddressEntityId")
                        .HasColumnType("bigint");

                    b.Property<List<string>>("CategoryLabel")
                        .HasColumnType("text[]");

                    b.Property<long?>("ContactEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoordinatesEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.Property<string>("YodleeMerchantId")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("AddressEntityId");

                    b.HasIndex("ContactEntityId");

                    b.HasIndex("CoordinatesEntityId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Name", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("First")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Last")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Middle")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.NetworthDetail", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<long?>("AssetEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LiabilityEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetworthEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("AssetEntityId");

                    b.HasIndex("LiabilityEntityId");

                    b.HasIndex("NetworthEntityId");

                    b.ToTable("Networths");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.NotificationEvent", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CallBackUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("NotificationEvent");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfileEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("ProfileEntityId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Preference", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("DateFormat")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Principal", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.ToTable("Principals");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Profile", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NameEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProviderAccountProfileEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("NameEntityId");

                    b.HasIndex("ProviderAccountProfileEntityId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Provider", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("AccountType")
                        .HasColumnType("text[]");

                    b.Property<List<int>>("AssociatedProviderIds")
                        .HasColumnType("integer[]");

                    b.Property<List<string>>("AuthParameter")
                        .HasColumnType("text[]");

                    b.Property<string>("AuthType")
                        .HasColumnType("text");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<string>("CountryISOCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Favicon")
                        .HasColumnType("text");

                    b.Property<string>("Help")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsAddedByUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsAutoRefreshEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsentRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguageISOCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginUrl")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PRIORITY")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryLanguageISOCode")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("YodleeProviderId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AggregationSource")
                        .HasColumnType("text");

                    b.Property<int>("ConsentId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("OauthMigrationStatus")
                        .HasColumnType("text");

                    b.Property<long?>("PreferencesEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<long>("YodleeProviderAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("PreferencesEntityId");

                    b.ToTable("ProviderAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccountPreference", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutoRefreshEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDataExtractsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("LinkedProviderAccountId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("ProviderAccountPreference");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccountProfile", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("YodleeUserProfileDetailProviderAccountId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("UserProfileDetailProviderAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderCount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("TotalEntityId");

                    b.ToTable("ProviderCounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProvidersDataset", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProviderEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("ProviderEntityId");

                    b.ToTable("ProvidersDatasets");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.PublicKey", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.ToTable("PublicKeys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RewardBalance", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("BalanceToLevel")
                        .HasColumnType("text");

                    b.Property<string>("BalanceToReward")
                        .HasColumnType("text");

                    b.Property<string>("BalanceType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractAccountEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Units")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("DataExtractAccountEntityId");

                    b.ToTable("RewardBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Row", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FieldRowChoice")
                        .HasColumnType("text");

                    b.Property<string>("Form")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LoginFormEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("YodleeRowId")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("LoginFormEntityId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Rule", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RuleClaus", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Field")
                        .HasColumnType("text");

                    b.Property<string>("FieldValue")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Operation")
                        .HasColumnType("text");

                    b.Property<int>("RuleClauseId")
                        .HasColumnType("integer");

                    b.Property<long?>("TransactionCategorizationRuleEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserDefinedRuleId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.HasIndex("TransactionCategorizationRuleEntityId");

                    b.ToTable("YodleeRuleClaus");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RuleClause", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Field")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Operation")
                        .HasColumnType("text");

                    b.Property<long?>("RuleEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("RuleEntityId");

                    b.ToTable("RuleClauses");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RunningBalance", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.ToTable("RunningBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Security", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccrualMethod")
                        .HasColumnType("text");

                    b.Property<int>("AgencyFactor")
                        .HasColumnType("integer");

                    b.Property<string>("CallDate")
                        .HasColumnType("text");

                    b.Property<int>("CallPrice")
                        .HasColumnType("integer");

                    b.Property<bool>("CdscFundFlag")
                        .HasColumnType("boolean");

                    b.Property<bool>("ClosedFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cusip")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("FederalTaxable")
                        .HasColumnType("boolean");

                    b.Property<string>("FirmEligible")
                        .HasColumnType("text");

                    b.Property<string>("FirstCouponDate")
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<string>("FundFamily")
                        .HasColumnType("text");

                    b.Property<string>("GicsSector")
                        .HasColumnType("text");

                    b.Property<string>("IncomeCurrency")
                        .HasColumnType("text");

                    b.Property<int>("InterestRate")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDummySecurity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnvestnetDummySecurity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSyntheticSecurity")
                        .HasColumnType("boolean");

                    b.Property<string>("Isin")
                        .HasColumnType("text");

                    b.Property<string>("IssueDate")
                        .HasColumnType("text");

                    b.Property<int>("IssueTypeMultiplier")
                        .HasColumnType("integer");

                    b.Property<string>("LastCouponDate")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedDate")
                        .HasColumnType("text");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaturityDate")
                        .HasColumnType("text");

                    b.Property<int>("MinimumPurchase")
                        .HasColumnType("integer");

                    b.Property<string>("MoodyRating")
                        .HasColumnType("text");

                    b.Property<string>("SAndPRating")
                        .HasColumnType("text");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<string>("Sedol")
                        .HasColumnType("text");

                    b.Property<string>("ShareClass")
                        .HasColumnType("text");

                    b.Property<bool>("StateTaxable")
                        .HasColumnType("boolean");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.Property<string>("SubSector")
                        .HasColumnType("text");

                    b.Property<string>("TradeCurrencyCode")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("YodleeSecurityId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("Security");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.SecurityHolding", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SecurityEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("YodleeSecurityHoldingId")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("SecurityEntityId");

                    b.ToTable("SecurityHoldings");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Statement", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AmountDueEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("Apr")
                        .HasColumnType("bigint");

                    b.Property<string>("BillingPeriodEnd")
                        .HasColumnType("text");

                    b.Property<string>("BillingPeriodStart")
                        .HasColumnType("text");

                    b.Property<long?>("CashAdvanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("CashApr")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<long?>("InterestAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastPaymentAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastPaymentDate")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<long?>("LoanBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinimumPaymentEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NewChargesEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrincipalAmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("StatementDate")
                        .HasColumnType("text");

                    b.Property<long>("YodleeStatementId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("AmountDueEntityId");

                    b.HasIndex("CashAdvanceEntityId");

                    b.HasIndex("InterestAmountEntityId");

                    b.HasIndex("LastPaymentAmountEntityId");

                    b.HasIndex("LoanBalanceEntityId");

                    b.HasIndex("MinimumPaymentEntityId");

                    b.HasIndex("NewChargesEntityId");

                    b.HasIndex("PrincipalAmountEntityId");

                    b.ToTable("YodleeStatements");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.StockExchangeDetail", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExchangeCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SecurityEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("SecurityEntityId");

                    b.ToTable("StockExchangeDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Summary", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreditTotalEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DebitTotalEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LinksEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionsSummaryEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("CreditTotalEntityId");

                    b.HasIndex("DebitTotalEntityId");

                    b.HasIndex("LinksEntityId");

                    b.HasIndex("TransactionsSummaryEntityId");

                    b.ToTable("Summarys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.SummaryDetails", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreditTotalEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DebitTotalEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SummaryEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("CreditTotalEntityId");

                    b.HasIndex("DebitTotalEntityId");

                    b.HasIndex("SummaryEntityId");

                    b.ToTable("SummaryDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Total", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.ToTable("Totals");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Transaction", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long?>("AmountEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("BaseType")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CategorySource")
                        .HasColumnType("text");

                    b.Property<string>("CategoryType")
                        .HasColumnType("text");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("text");

                    b.Property<long?>("CommissionEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CusIpNumber")
                        .HasColumnType("text");

                    b.Property<long?>("DataExtractUserDataEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DescriptionEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetailCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("HighLevelCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("HoldingDescription")
                        .HasColumnType("text");

                    b.Property<long?>("InterestEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<string>("Isin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<long?>("MerchantEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("PostDate")
                        .HasColumnType("text");

                    b.Property<long?>("PriceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrincipalEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long?>("RunningBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("SeDol")
                        .HasColumnType("text");

                    b.Property<string>("SettleDate")
                        .HasColumnType("text");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("SubType")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<long?>("TransactionCriteriaEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionDate")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Valoren")
                        .HasColumnType("text");

                    b.Property<long>("YodleeTransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("AmountEntityId");

                    b.HasIndex("CommissionEntityId");

                    b.HasIndex("DataExtractUserDataEntityId");

                    b.HasIndex("DescriptionEntityId");

                    b.HasIndex("InterestEntityId");

                    b.HasIndex("MerchantEntityId");

                    b.HasIndex("PriceEntityId");

                    b.HasIndex("PrincipalEntityId");

                    b.HasIndex("RunningBalanceEntityId");

                    b.HasIndex("TransactionCriteriaEntityId");

                    b.ToTable("YodleeTransactions");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCategorizationRule", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryLevelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MemId")
                        .HasColumnType("integer");

                    b.Property<int>("RulePriority")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionCategorizationId")
                        .HasColumnType("integer");

                    b.Property<int>("UserDefinedRuleId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("TransactionCategorizationRules");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCategory", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DefaultCategoryName")
                        .HasColumnType("text");

                    b.Property<string>("DefaultHighLevelCategoryName")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HighLevelCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("HighLevelCategoryName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("YodleeTransactionCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("TransactionCategories");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCriteria", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BaseType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("DateVariance")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Keyword")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Matched")
                        .HasColumnType("text");

                    b.Property<long?>("VerifyAccountDTOEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("VerifyAccountDTOEntityId");

                    b.ToTable("TransactionCriterias");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionsLink", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Transactions")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("TransactionsLinks");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionsSummary", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoryType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreditTotalEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DebitTotalEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LinksEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("CreditTotalEntityId");

                    b.HasIndex("DebitTotalEntityId");

                    b.HasIndex("LinksEntityId");

                    b.ToTable("TransactionsSummarys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateAccountDetails", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountStatus")
                        .HasColumnType("text");

                    b.Property<long?>("AddressEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AmountDueEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<long?>("HomeValueEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("IncludeInNetWorth")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Is_E_billEnrolled")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("AddressEntityId");

                    b.HasIndex("AmountDueEntityId");

                    b.HasIndex("BalanceEntityId");

                    b.HasIndex("HomeValueEntityId");

                    b.ToTable("UpdateAccountDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountAttribute", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("Container")
                        .HasColumnType("text[]");

                    b.Property<long?>("ContainerAttributesEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("UpdateProviderAccountDataSetEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("ContainerAttributesEntityId");

                    b.HasIndex("UpdateProviderAccountDataSetEntityId");

                    b.ToTable("UpdateProviderAccountAttributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountDataSet", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("UpdateProviderAccountDataSets");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountField", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("YodleeUpdateProviderAccountFieldsId")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("UpdateProviderAccountFields");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UserData", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UserDatas");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Users", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AddressEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginName")
                        .HasColumnType("text");

                    b.Property<long?>("NameEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PreferencesEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleType")
                        .HasColumnType("text");

                    b.Property<string>("SegmentName")
                        .HasColumnType("text");

                    b.Property<long>("YodleeUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("AddressEntityId");

                    b.HasIndex("NameEntityId");

                    b.HasIndex("PreferencesEntityId");

                    b.ToTable("YodleeUser");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerificationAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<long?>("BankTransferCodeEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("BankTransferCodeEntityId");

                    b.ToTable("YodleeVerificationAccount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Verifications", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProviderAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("RemainingAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationDate")
                        .HasColumnType("text");

                    b.Property<string>("VerificationStatus")
                        .HasColumnType("text");

                    b.Property<string>("VerificationType")
                        .HasColumnType("text");

                    b.Property<long>("YodleeVerificationId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("AccountId");

                    b.ToTable("YodleeVerification");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifiedAccount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<long?>("AvailableBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CONTAINER")
                        .HasColumnType("text");

                    b.Property<long?>("CashEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentBalanceEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayedName")
                        .HasColumnType("text");

                    b.Property<string>("FailedReason")
                        .HasColumnType("text");

                    b.Property<long?>("FullAccountNumberListEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<string>("VerificationStatus")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("AvailableBalanceEntityId");

                    b.HasIndex("BalanceEntityId");

                    b.HasIndex("CashEntityId");

                    b.HasIndex("CurrentBalanceEntityId");

                    b.HasIndex("FullAccountNumberListEntityId");

                    b.ToTable("YodleeVerifiedAccount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifyAccountDTO", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.ToTable("VerifyAccountDTOs");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifyAccountTransactionCriteria", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BaseType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("DateVariance")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Keyword")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.ToTable("VerifyAccountTransactionCriterias");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.YodleeAmount", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<long?>("CoverageEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LimitType")
                        .HasColumnType("text");

                    b.Property<long?>("MetEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UnitType")
                        .HasColumnType("text");

                    b.Property<long?>("coverEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("CoverageEntityId");

                    b.HasIndex("MetEntityId");

                    b.HasIndex("coverEntityId");

                    b.ToTable("YodleeAmounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Model.Authorizations.YodleeAccessToken", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EntityId");

                    b.ToTable("YodleeWrapperIntegrationAuthTokens");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Model.Authorizations.YodleeApiKey", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("YodleeWrapperIntegrationApiKeys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Model.Configurations.YodleeConfiguration", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.Property<string>("AdminUsername")
                        .HasColumnType("text");

                    b.Property<string>("ApiVersion")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProviderAccountId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("YodleeWrapperIntegrationConfigurations");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Model.RequestLog.RequestLog", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Endpoint")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<string>("ReasonPhrase")
                        .HasColumnType("text");

                    b.Property<string>("Request")
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("YodleeWrapperIntegrationRequestLog");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Account", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableBalance")
                        .WithMany()
                        .HasForeignKey("AvailableBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableCash")
                        .WithMany()
                        .HasForeignKey("AvailableCashEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableCredit")
                        .WithMany()
                        .HasForeignKey("AvailableCreditEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Cash")
                        .WithMany()
                        .HasForeignKey("CashEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CurrentBalance")
                        .WithMany()
                        .HasForeignKey("CurrentBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastEmployeeContributionAmount")
                        .WithMany()
                        .HasForeignKey("LastEmployeeContributionAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastPaymentAmount")
                        .WithMany()
                        .HasForeignKey("LastPaymentAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MarginBalance")
                        .WithMany()
                        .HasForeignKey("MarginBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MinimumAmountDue")
                        .WithMany()
                        .HasForeignKey("MinimumAmountDueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "OriginalLoanAmount")
                        .WithMany()
                        .HasForeignKey("OriginalLoanAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "PrincipalBalance")
                        .WithMany()
                        .HasForeignKey("PrincipalBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RunningBalance")
                        .WithMany()
                        .HasForeignKey("RunningBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCashLimit")
                        .WithMany()
                        .HasForeignKey("TotalCashLimitEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCreditLine")
                        .WithMany()
                        .HasForeignKey("TotalCreditLineEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.VerifyAccountDTO", null)
                        .WithMany("Account")
                        .HasForeignKey("VerifyAccountDTOEntityId");

                    b.Navigation("AmountDue");

                    b.Navigation("AvailableBalance");

                    b.Navigation("AvailableCash");

                    b.Navigation("AvailableCredit");

                    b.Navigation("Balance");

                    b.Navigation("Cash");

                    b.Navigation("CurrentBalance");

                    b.Navigation("LastEmployeeContributionAmount");

                    b.Navigation("LastPaymentAmount");

                    b.Navigation("MarginBalance");

                    b.Navigation("MinimumAmountDue");

                    b.Navigation("OriginalLoanAmount");

                    b.Navigation("PrincipalBalance");

                    b.Navigation("RunningBalance");

                    b.Navigation("TotalCashLimit");

                    b.Navigation("TotalCreditLine");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AccountBalance", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableBalance")
                        .WithMany()
                        .HasForeignKey("AvailableBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Cash")
                        .WithMany()
                        .HasForeignKey("CashEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CurrentBalance")
                        .WithMany()
                        .HasForeignKey("CurrentBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalBalance")
                        .WithMany()
                        .HasForeignKey("TotalBalanceEntityId");

                    b.Navigation("AvailableBalance");

                    b.Navigation("Balance");

                    b.Navigation("Cash");

                    b.Navigation("CurrentBalance");

                    b.Navigation("TotalBalance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AddManualAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "HomeValue")
                        .WithMany()
                        .HasForeignKey("HomeValueEntityId");

                    b.Navigation("Address");

                    b.Navigation("AmountDue");

                    b.Navigation("Balance");

                    b.Navigation("HomeValue");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Address", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Profile", null)
                        .WithMany("Address")
                        .HasForeignKey("ProfileEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AssetClassification", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Holding", null)
                        .WithMany("AssetClassification")
                        .HasForeignKey("HoldingEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Attribute", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.ContainerAttribute", "ContainerAttributes")
                        .WithMany()
                        .HasForeignKey("ContainerAttributesEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.ProvidersDataset", null)
                        .WithMany("Attribute")
                        .HasForeignKey("ProvidersDatasetEntityId");

                    b.Navigation("ContainerAttributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.BankTransferCode", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Account", null)
                        .WithMany("BankTransferCode")
                        .HasForeignKey("AccountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractAccount", null)
                        .WithMany("BankTransferCode")
                        .HasForeignKey("DataExtractAccountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.VerifiedAccount", null)
                        .WithMany("BankTransferCode")
                        .HasForeignKey("VerifiedAccountEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Capability", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Provider", null)
                        .WithMany("Capability")
                        .HasForeignKey("ProviderEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ContainerAttribute", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Bank", "BANK")
                        .WithMany()
                        .HasForeignKey("BANKEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.CardDetail", "CREDITCARD")
                        .WithMany()
                        .HasForeignKey("CREDITCARDEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.CardDetail", "INSURANCE")
                        .WithMany()
                        .HasForeignKey("INSURANCEEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.CardDetail", "INVESTMENT")
                        .WithMany()
                        .HasForeignKey("INVESTMENTEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.CardDetail", "LOAN")
                        .WithMany()
                        .HasForeignKey("LOANEntityId");

                    b.Navigation("BANK");

                    b.Navigation("CREDITCARD");

                    b.Navigation("INSURANCE");

                    b.Navigation("INVESTMENT");

                    b.Navigation("LOAN");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Coverage", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractAccount", null)
                        .WithMany("Coverage")
                        .HasForeignKey("DataExtractAccountEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AnnuityBalance")
                        .WithMany()
                        .HasForeignKey("AnnuityBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableBalance")
                        .WithMany()
                        .HasForeignKey("AvailableBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableCash")
                        .WithMany()
                        .HasForeignKey("AvailableCashEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableCredit")
                        .WithMany()
                        .HasForeignKey("AvailableCreditEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Cash")
                        .WithMany()
                        .HasForeignKey("CashEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CashValue")
                        .WithMany()
                        .HasForeignKey("CashValueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CurrentBalance")
                        .WithMany()
                        .HasForeignKey("CurrentBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUserData", null)
                        .WithMany("Account")
                        .HasForeignKey("DataExtractUserDataEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "DeathBenefit")
                        .WithMany()
                        .HasForeignKey("DeathBenefitEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "EscrowBalance")
                        .WithMany()
                        .HasForeignKey("EscrowBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "FaceAmount")
                        .WithMany()
                        .HasForeignKey("FaceAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "HomeValue")
                        .WithMany()
                        .HasForeignKey("HomeValueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "InterestPaidLastYear")
                        .WithMany()
                        .HasForeignKey("InterestPaidLastYearEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "InterestPaidYTD")
                        .WithMany()
                        .HasForeignKey("InterestPaidYTDEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastEmployeeContributionAmount")
                        .WithMany()
                        .HasForeignKey("LastEmployeeContributionAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastPaymentAmount")
                        .WithMany()
                        .HasForeignKey("LastPaymentAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastPayment")
                        .WithMany()
                        .HasForeignKey("LastPaymentEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LoanPayoffAmount")
                        .WithMany()
                        .HasForeignKey("LoanPayoffAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.LoanPayoffDetails", "LoanPayoffDetails")
                        .WithMany()
                        .HasForeignKey("LoanPayoffDetailsEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MarginBalance")
                        .WithMany()
                        .HasForeignKey("MarginBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MaturityAmount")
                        .WithMany()
                        .HasForeignKey("MaturityAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MinimumAmountDue")
                        .WithMany()
                        .HasForeignKey("MinimumAmountDueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MoneyMarketBalance")
                        .WithMany()
                        .HasForeignKey("MoneyMarketBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "OriginalLoanAmount")
                        .WithMany()
                        .HasForeignKey("OriginalLoanAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "OverDraftLimit")
                        .WithMany()
                        .HasForeignKey("OverDraftLimitEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Premium")
                        .WithMany()
                        .HasForeignKey("PremiumEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "PrincipalBalance")
                        .WithMany()
                        .HasForeignKey("PrincipalBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RecurringPayment")
                        .WithMany()
                        .HasForeignKey("RecurringPaymentEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RemainingBalance")
                        .WithMany()
                        .HasForeignKey("RemainingBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RunningBalance")
                        .WithMany()
                        .HasForeignKey("RunningBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "ShortBalance")
                        .WithMany()
                        .HasForeignKey("ShortBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCashLimit")
                        .WithMany()
                        .HasForeignKey("TotalCashLimitEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCreditLimit")
                        .WithMany()
                        .HasForeignKey("TotalCreditLimitEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCreditLine")
                        .WithMany()
                        .HasForeignKey("TotalCreditLineEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalUnvestedBalance")
                        .WithMany()
                        .HasForeignKey("TotalUnvestedBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalVestedBalance")
                        .WithMany()
                        .HasForeignKey("TotalVestedBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "_401kLoan")
                        .WithMany()
                        .HasForeignKey("_401kLoanEntityId");

                    b.Navigation("_401kLoan");

                    b.Navigation("Address");

                    b.Navigation("AmountDue");

                    b.Navigation("AnnuityBalance");

                    b.Navigation("AvailableBalance");

                    b.Navigation("AvailableCash");

                    b.Navigation("AvailableCredit");

                    b.Navigation("Balance");

                    b.Navigation("Cash");

                    b.Navigation("CashValue");

                    b.Navigation("CurrentBalance");

                    b.Navigation("DeathBenefit");

                    b.Navigation("EscrowBalance");

                    b.Navigation("FaceAmount");

                    b.Navigation("HomeValue");

                    b.Navigation("InterestPaidLastYear");

                    b.Navigation("InterestPaidYTD");

                    b.Navigation("LastEmployeeContributionAmount");

                    b.Navigation("LastPayment");

                    b.Navigation("LastPaymentAmount");

                    b.Navigation("LoanPayoffAmount");

                    b.Navigation("LoanPayoffDetails");

                    b.Navigation("MarginBalance");

                    b.Navigation("MaturityAmount");

                    b.Navigation("MinimumAmountDue");

                    b.Navigation("MoneyMarketBalance");

                    b.Navigation("OriginalLoanAmount");

                    b.Navigation("OverDraftLimit");

                    b.Navigation("Premium");

                    b.Navigation("PrincipalBalance");

                    b.Navigation("RecurringPayment");

                    b.Navigation("RemainingBalance");

                    b.Navigation("RunningBalance");

                    b.Navigation("ShortBalance");

                    b.Navigation("TotalCashLimit");

                    b.Navigation("TotalCreditLimit");

                    b.Navigation("TotalCreditLine");

                    b.Navigation("TotalUnvestedBalance");

                    b.Navigation("TotalVestedBalance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractDataset", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractAccount", null)
                        .WithMany("Dataset")
                        .HasForeignKey("DataExtractAccountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractProviderAccount", null)
                        .WithMany("Dataset")
                        .HasForeignKey("DataExtractProviderAccountEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractProviderAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUserData", null)
                        .WithMany("ProviderAccount")
                        .HasForeignKey("DataExtractUserDataEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractUserData", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Data", null)
                        .WithMany("UserData")
                        .HasForeignKey("DataEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUser", "User")
                        .WithMany()
                        .HasForeignKey("UserEntityId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataSet", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Account", null)
                        .WithMany("DataSet")
                        .HasForeignKey("AccountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.ProviderAccount", null)
                        .WithMany("DataSet")
                        .HasForeignKey("ProviderAccountEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DetailCategory", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionCategory", null)
                        .WithMany("DetailCategory")
                        .HasForeignKey("TransactionCategoryEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Email", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Profile", null)
                        .WithMany("Email")
                        .HasForeignKey("ProfileEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Event", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Data", "data")
                        .WithMany()
                        .HasForeignKey("dataEntityId");

                    b.Navigation("data");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Field", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Row", null)
                        .WithMany("Field")
                        .HasForeignKey("RowEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalBalance", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.NetworthDetail", null)
                        .WithMany("HistoricalBalances")
                        .HasForeignKey("NetworthDetailEntityId");

                    b.Navigation("Balance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalBalanceAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.HistoricalAccount", null)
                        .WithMany("HistoricalBalances")
                        .HasForeignKey("HistoricalAccountEntityId");

                    b.Navigation("Balance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holder", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.VerifiedAccount", null)
                        .WithMany("Holder")
                        .HasForeignKey("VerifiedAccountEntityId");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holding", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AccruedIncome")
                        .WithMany()
                        .HasForeignKey("AccruedIncomeEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AccruedInterest")
                        .WithMany()
                        .HasForeignKey("AccruedInterestEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CostBasis")
                        .WithMany()
                        .HasForeignKey("CostBasisEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUserData", null)
                        .WithMany("Holding")
                        .HasForeignKey("DataExtractUserDataEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.HoldingsSummary", null)
                        .WithMany("Holding")
                        .HasForeignKey("HoldingsSummaryEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Price")
                        .WithMany()
                        .HasForeignKey("PriceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Spread")
                        .WithMany()
                        .HasForeignKey("SpreadEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "StrikePrice")
                        .WithMany()
                        .HasForeignKey("StrikePriceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "UnvestedValue")
                        .WithMany()
                        .HasForeignKey("UnvestedValueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Value")
                        .WithMany()
                        .HasForeignKey("ValueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "VestedValue")
                        .WithMany()
                        .HasForeignKey("VestedValueEntityId");

                    b.Navigation("AccruedIncome");

                    b.Navigation("AccruedInterest");

                    b.Navigation("CostBasis");

                    b.Navigation("Price");

                    b.Navigation("Spread");

                    b.Navigation("StrikePrice");

                    b.Navigation("UnvestedValue");

                    b.Navigation("Value");

                    b.Navigation("VestedValue");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.HoldingsSummary", null)
                        .WithMany("Account")
                        .HasForeignKey("HoldingsSummaryEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Value")
                        .WithMany()
                        .HasForeignKey("ValueEntityId");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsSummary", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Value")
                        .WithMany()
                        .HasForeignKey("ValueEntityId");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Identifier", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Holder", null)
                        .WithMany("Identifier")
                        .HasForeignKey("HolderEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Profile", null)
                        .WithMany("Identifier")
                        .HasForeignKey("ProfileEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Intermediary", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Transaction", null)
                        .WithMany("Intermediaries")
                        .HasForeignKey("TransactionEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Link", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.UserData", null)
                        .WithMany("Links")
                        .HasForeignKey("UserDataEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoanPayoffDetails", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "OutstandingBalance")
                        .WithMany()
                        .HasForeignKey("OutstandingBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "PayoffAmount")
                        .WithMany()
                        .HasForeignKey("PayoffAmountEntityId");

                    b.Navigation("OutstandingBalance");

                    b.Navigation("PayoffAmount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoginForm", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.ProviderAccount", null)
                        .WithMany("LoginForm")
                        .HasForeignKey("ProviderAccountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Provider", null)
                        .WithMany("LoginForm")
                        .HasForeignKey("ProviderEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Merchant", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Coordinates", "Coordinates")
                        .WithMany()
                        .HasForeignKey("CoordinatesEntityId");

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.NetworthDetail", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Liability")
                        .WithMany()
                        .HasForeignKey("LiabilityEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Networth")
                        .WithMany()
                        .HasForeignKey("NetworthEntityId");

                    b.Navigation("Asset");

                    b.Navigation("Liability");

                    b.Navigation("Networth");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Profile", null)
                        .WithMany("PhoneNumber")
                        .HasForeignKey("ProfileEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Profile", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.ProviderAccountProfile", null)
                        .WithMany("Profile")
                        .HasForeignKey("ProviderAccountProfileEntityId");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.ProviderAccountPreference", "Preferences")
                        .WithMany()
                        .HasForeignKey("PreferencesEntityId");

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderCount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Total", "Total")
                        .WithMany()
                        .HasForeignKey("TotalEntityId");

                    b.Navigation("Total");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProvidersDataset", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Provider", null)
                        .WithMany("Dataset")
                        .HasForeignKey("ProviderEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RewardBalance", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractAccount", null)
                        .WithMany("RewardBalance")
                        .HasForeignKey("DataExtractAccountEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Row", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.LoginForm", null)
                        .WithMany("Row")
                        .HasForeignKey("LoginFormEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RuleClaus", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionCategorizationRule", null)
                        .WithMany("RuleClauses")
                        .HasForeignKey("TransactionCategorizationRuleEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RuleClause", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Rule", null)
                        .WithMany("RuleClause")
                        .HasForeignKey("RuleEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.SecurityHolding", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Security", "Security")
                        .WithMany()
                        .HasForeignKey("SecurityEntityId");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Statement", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CashAdvance")
                        .WithMany()
                        .HasForeignKey("CashAdvanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "InterestAmount")
                        .WithMany()
                        .HasForeignKey("InterestAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastPaymentAmount")
                        .WithMany()
                        .HasForeignKey("LastPaymentAmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LoanBalance")
                        .WithMany()
                        .HasForeignKey("LoanBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MinimumPayment")
                        .WithMany()
                        .HasForeignKey("MinimumPaymentEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "NewCharges")
                        .WithMany()
                        .HasForeignKey("NewChargesEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "PrincipalAmount")
                        .WithMany()
                        .HasForeignKey("PrincipalAmountEntityId");

                    b.Navigation("AmountDue");

                    b.Navigation("CashAdvance");

                    b.Navigation("InterestAmount");

                    b.Navigation("LastPaymentAmount");

                    b.Navigation("LoanBalance");

                    b.Navigation("MinimumPayment");

                    b.Navigation("NewCharges");

                    b.Navigation("PrincipalAmount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.StockExchangeDetail", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Security", null)
                        .WithMany("StockExchangeDetails")
                        .HasForeignKey("SecurityEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Summary", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CreditTotal")
                        .WithMany()
                        .HasForeignKey("CreditTotalEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "DebitTotal")
                        .WithMany()
                        .HasForeignKey("DebitTotalEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionsLink", "Links")
                        .WithMany()
                        .HasForeignKey("LinksEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionsSummary", null)
                        .WithMany("CategorySummary")
                        .HasForeignKey("TransactionsSummaryEntityId");

                    b.Navigation("CreditTotal");

                    b.Navigation("DebitTotal");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.SummaryDetails", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CreditTotal")
                        .WithMany()
                        .HasForeignKey("CreditTotalEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "DebitTotal")
                        .WithMany()
                        .HasForeignKey("DebitTotalEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Summary", null)
                        .WithMany("Details")
                        .HasForeignKey("SummaryEntityId");

                    b.Navigation("CreditTotal");

                    b.Navigation("DebitTotal");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Commission")
                        .WithMany()
                        .HasForeignKey("CommissionEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUserData", null)
                        .WithMany("Transaction")
                        .HasForeignKey("DataExtractUserDataEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Description", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Interest")
                        .WithMany()
                        .HasForeignKey("InterestEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Price")
                        .WithMany()
                        .HasForeignKey("PriceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Principal", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RunningBalance")
                        .WithMany()
                        .HasForeignKey("RunningBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionCriteria", null)
                        .WithMany("VerifiedTransaction")
                        .HasForeignKey("TransactionCriteriaEntityId");

                    b.Navigation("Amount");

                    b.Navigation("Commission");

                    b.Navigation("Description");

                    b.Navigation("Interest");

                    b.Navigation("Merchant");

                    b.Navigation("Price");

                    b.Navigation("Principal");

                    b.Navigation("RunningBalance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCriteria", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.VerifyAccountDTO", null)
                        .WithMany("TransactionCriteria")
                        .HasForeignKey("VerifyAccountDTOEntityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionsSummary", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CreditTotal")
                        .WithMany()
                        .HasForeignKey("CreditTotalEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "DebitTotal")
                        .WithMany()
                        .HasForeignKey("DebitTotalEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionsLink", "Links")
                        .WithMany()
                        .HasForeignKey("LinksEntityId");

                    b.Navigation("CreditTotal");

                    b.Navigation("DebitTotal");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateAccountDetails", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "HomeValue")
                        .WithMany()
                        .HasForeignKey("HomeValueEntityId");

                    b.Navigation("Address");

                    b.Navigation("AmountDue");

                    b.Navigation("Balance");

                    b.Navigation("HomeValue");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountAttribute", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.ContainerAttribute", "ContainerAttributes")
                        .WithMany()
                        .HasForeignKey("ContainerAttributesEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.UpdateProviderAccountDataSet", null)
                        .WithMany("Attribute")
                        .HasForeignKey("UpdateProviderAccountDataSetEntityId");

                    b.Navigation("ContainerAttributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UserData", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUser", "User")
                        .WithMany()
                        .HasForeignKey("UserEntityId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Users", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Preference", "Preferences")
                        .WithMany()
                        .HasForeignKey("PreferencesEntityId");

                    b.Navigation("Address");

                    b.Navigation("Name");

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerificationAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.BankTransferCode", "BankTransferCode")
                        .WithMany()
                        .HasForeignKey("BankTransferCodeEntityId");

                    b.Navigation("BankTransferCode");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Verifications", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.VerificationAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifiedAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableBalance")
                        .WithMany()
                        .HasForeignKey("AvailableBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Cash")
                        .WithMany()
                        .HasForeignKey("CashEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CurrentBalance")
                        .WithMany()
                        .HasForeignKey("CurrentBalanceEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.FullAccountNumberList", "FullAccountNumberList")
                        .WithMany()
                        .HasForeignKey("FullAccountNumberListEntityId");

                    b.Navigation("AvailableBalance");

                    b.Navigation("Balance");

                    b.Navigation("Cash");

                    b.Navigation("CurrentBalance");

                    b.Navigation("FullAccountNumberList");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.YodleeAmount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Coverage", null)
                        .WithMany("Amount")
                        .HasForeignKey("CoverageEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Met")
                        .WithMany()
                        .HasForeignKey("MetEntityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "cover")
                        .WithMany()
                        .HasForeignKey("coverEntityId");

                    b.Navigation("cover");

                    b.Navigation("Met");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Account", b =>
                {
                    b.Navigation("BankTransferCode");

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Coverage", b =>
                {
                    b.Navigation("Amount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Data", b =>
                {
                    b.Navigation("UserData");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractAccount", b =>
                {
                    b.Navigation("BankTransferCode");

                    b.Navigation("Coverage");

                    b.Navigation("Dataset");

                    b.Navigation("RewardBalance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractProviderAccount", b =>
                {
                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractUserData", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Holding");

                    b.Navigation("ProviderAccount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalAccount", b =>
                {
                    b.Navigation("HistoricalBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holder", b =>
                {
                    b.Navigation("Identifier");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holding", b =>
                {
                    b.Navigation("AssetClassification");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsSummary", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Holding");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoginForm", b =>
                {
                    b.Navigation("Row");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.NetworthDetail", b =>
                {
                    b.Navigation("HistoricalBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Profile", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Email");

                    b.Navigation("Identifier");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Provider", b =>
                {
                    b.Navigation("Capability");

                    b.Navigation("Dataset");

                    b.Navigation("LoginForm");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccount", b =>
                {
                    b.Navigation("DataSet");

                    b.Navigation("LoginForm");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccountProfile", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProvidersDataset", b =>
                {
                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Row", b =>
                {
                    b.Navigation("Field");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Rule", b =>
                {
                    b.Navigation("RuleClause");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Security", b =>
                {
                    b.Navigation("StockExchangeDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Summary", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Intermediaries");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCategorizationRule", b =>
                {
                    b.Navigation("RuleClauses");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCategory", b =>
                {
                    b.Navigation("DetailCategory");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCriteria", b =>
                {
                    b.Navigation("VerifiedTransaction");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionsSummary", b =>
                {
                    b.Navigation("CategorySummary");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountDataSet", b =>
                {
                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UserData", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifiedAccount", b =>
                {
                    b.Navigation("BankTransferCode");

                    b.Navigation("Holder");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifyAccountDTO", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("TransactionCriteria");
                });
#pragma warning restore 612, 618
        }
    }
}
