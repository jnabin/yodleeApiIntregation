// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YodleeIntegration.Persistence.DbContexts;

namespace YodleeIntegration.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211215083359_AllEntitiesclassesComplete")]
    partial class AllEntitiesclassesComplete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AccessTokens", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("YodleeAccessTokens");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountStatus")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<string>("AggregationSource")
                        .HasColumnType("text");

                    b.Property<long?>("AmountDueId")
                        .HasColumnType("bigint");

                    b.Property<double?>("AnnualPercentageYield")
                        .HasColumnType("double precision");

                    b.Property<double?>("Apr")
                        .HasColumnType("double precision");

                    b.Property<long?>("AvailableBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvailableCashId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvailableCreditId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint");

                    b.Property<double?>("CashApr")
                        .HasColumnType("double precision");

                    b.Property<long?>("CashId")
                        .HasColumnType("bigint");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayedName")
                        .HasColumnType("text");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<bool>("IncludeInNetWorth")
                        .HasColumnType("boolean");

                    b.Property<double?>("InterestRate")
                        .HasColumnType("double precision");

                    b.Property<string>("InterestRateType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsset")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastEmployeeContributionAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastEmployeeContributionDate")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastPaymentAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastPaymentDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("MarginBalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaturityDate")
                        .HasColumnType("text");

                    b.Property<long?>("MinimumAmountDueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginalLoanAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginationDate")
                        .HasColumnType("text");

                    b.Property<long?>("PrincipalBalanceId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<long?>("RunningBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalCashLimitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalCreditLineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VerifyAccountDTOId")
                        .HasColumnType("bigint");

                    b.Property<int>("YodleeAccountId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AmountDueId");

                    b.HasIndex("AvailableBalanceId");

                    b.HasIndex("AvailableCashId");

                    b.HasIndex("AvailableCreditId");

                    b.HasIndex("BalanceId");

                    b.HasIndex("CashId");

                    b.HasIndex("CurrentBalanceId");

                    b.HasIndex("LastEmployeeContributionAmountId");

                    b.HasIndex("LastPaymentAmountId");

                    b.HasIndex("MarginBalanceId");

                    b.HasIndex("MinimumAmountDueId");

                    b.HasIndex("OriginalLoanAmountId");

                    b.HasIndex("PrincipalBalanceId");

                    b.HasIndex("RunningBalanceId");

                    b.HasIndex("TotalCashLimitId");

                    b.HasIndex("TotalCreditLineId");

                    b.HasIndex("VerifyAccountDTOId");

                    b.ToTable("YodleeAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AccountBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<long?>("AvailableBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashId")
                        .HasColumnType("bigint");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FailedReason")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<string>("RefreshStatus")
                        .HasColumnType("text");

                    b.Property<long?>("TotalBalanceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailableBalanceId");

                    b.HasIndex("BalanceId");

                    b.HasIndex("CashId");

                    b.HasIndex("CurrentBalanceId");

                    b.HasIndex("TotalBalanceId");

                    b.ToTable("AccountBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AddManualAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AmountDueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<long?>("HomeValueId")
                        .HasColumnType("bigint");

                    b.Property<string>("IncludeInNetWorth")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("ValuationType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AmountDueId");

                    b.HasIndex("BalanceId");

                    b.HasIndex("HomeValueId");

                    b.ToTable("AddManualAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AddManualResponseAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("YodleeAddManualResponseAccountId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AddManualResponseAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("Address3")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceType")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AssetClassification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Allocation")
                        .HasColumnType("integer");

                    b.Property<string>("ClassificationType")
                        .HasColumnType("text");

                    b.Property<string>("ClassificationValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("HoldingId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HoldingId");

                    b.ToTable("AssetClassifications");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AssetClassificationList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClassificationType")
                        .HasColumnType("text");

                    b.Property<List<string>>("ClassificationValue")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AssetClassificationLists");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Attribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("Container")
                        .HasColumnType("text[]");

                    b.Property<long?>("ContainerAttributesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FromDate")
                        .HasColumnType("text");

                    b.Property<string>("FromFinYear")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProvidersDatasetId")
                        .HasColumnType("bigint");

                    b.Property<string>("ToDate")
                        .HasColumnType("text");

                    b.Property<string>("ToFinYear")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContainerAttributesId");

                    b.HasIndex("ProvidersDatasetId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<string>>("FullAccountNumberFields")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfTransactionDays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.BankTransferCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long?>("VerifiedAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("YodleeBankTransferCodeId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DataExtractAccountId");

                    b.HasIndex("VerifiedAccountId");

                    b.ToTable("BankTransferCodes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Capability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("Container")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProviderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Capabilities");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.CardDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<string>>("FullAccountNumberFields")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfTransactionDays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CardDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ContainerAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("BANKId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CREDITCARDId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("INSURANCEId")
                        .HasColumnType("bigint");

                    b.Property<long?>("INVESTMENTId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long?>("LOANId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BANKId");

                    b.HasIndex("CREDITCARDId");

                    b.HasIndex("INSURANCEId");

                    b.HasIndex("INVESTMENTId");

                    b.HasIndex("LOANId");

                    b.ToTable("ContainerAttributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Coordinates", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Latitude")
                        .HasColumnType("integer");

                    b.Property<int>("Longitude")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Coverage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EndDate")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlanType")
                        .HasColumnType("text");

                    b.Property<string>("StartDate")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataExtractAccountId");

                    b.ToTable("Coverages");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Data", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FromDate")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ToDate")
                        .HasColumnType("text");

                    b.Property<int>("UserCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Datas");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountStatus")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregationSource")
                        .HasColumnType("text");

                    b.Property<long?>("AmountDueId")
                        .HasColumnType("bigint");

                    b.Property<int>("AnnualPercentageYield")
                        .HasColumnType("integer");

                    b.Property<long?>("AnnuityBalanceId")
                        .HasColumnType("bigint");

                    b.Property<int>("Apr")
                        .HasColumnType("integer");

                    b.Property<List<int>>("AssociatedProviderAccountId")
                        .HasColumnType("integer[]");

                    b.Property<long?>("AvailableBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvailableCashId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvailableCreditId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint");

                    b.Property<int>("CashApr")
                        .HasColumnType("integer");

                    b.Property<long?>("CashId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashValueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<string>("Collateral")
                        .HasColumnType("text");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentBalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentLevel")
                        .HasColumnType("text");

                    b.Property<long?>("DataExtractUserDataId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeathBenefitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DerivedApr")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayedName")
                        .HasColumnType("text");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<string>("EnrollmentDate")
                        .HasColumnType("text");

                    b.Property<long?>("EscrowBalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("EstimatedDate")
                        .HasColumnType("text");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("text");

                    b.Property<long?>("FaceAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<string>("Guarantor")
                        .HasColumnType("text");

                    b.Property<string>("HomeInsuranceType")
                        .HasColumnType("text");

                    b.Property<long?>("HomeValueId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IncludeInNetWorth")
                        .HasColumnType("boolean");

                    b.Property<long?>("InterestPaidLastYearId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InterestPaidYTDId")
                        .HasColumnType("bigint");

                    b.Property<int>("InterestRate")
                        .HasColumnType("integer");

                    b.Property<string>("InterestRateType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsset")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastEmployeeContributionAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastEmployeeContributionDate")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastPaymentAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastPaymentDate")
                        .HasColumnType("text");

                    b.Property<long?>("LastPaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Lender")
                        .HasColumnType("text");

                    b.Property<string>("LifeInsuranceType")
                        .HasColumnType("text");

                    b.Property<string>("LoanPayByDate")
                        .HasColumnType("text");

                    b.Property<long?>("LoanPayoffAmountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LoanPayoffDetailsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MarginBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MaturityAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaturityDate")
                        .HasColumnType("text");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<long?>("MinimumAmountDueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MoneyMarketBalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("NextLevel")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("OauthMigrationStatus")
                        .HasColumnType("text");

                    b.Property<long?>("OriginalLoanAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginationDate")
                        .HasColumnType("text");

                    b.Property<long?>("OverDraftLimitId")
                        .HasColumnType("bigint");

                    b.Property<string>("PolicyEffectiveDate")
                        .HasColumnType("text");

                    b.Property<string>("PolicyFromDate")
                        .HasColumnType("text");

                    b.Property<string>("PolicyStatus")
                        .HasColumnType("text");

                    b.Property<string>("PolicyTerm")
                        .HasColumnType("text");

                    b.Property<string>("PolicyToDate")
                        .HasColumnType("text");

                    b.Property<long?>("PremiumId")
                        .HasColumnType("bigint");

                    b.Property<string>("PremiumPaymentTerm")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryRewardUnit")
                        .HasColumnType("text");

                    b.Property<long?>("PrincipalBalanceId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<long?>("RecurringPaymentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RemainingBalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("RepaymentPlanType")
                        .HasColumnType("text");

                    b.Property<long?>("RunningBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShortBalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceAccountStatus")
                        .HasColumnType("text");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<int>("SourceProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Term")
                        .HasColumnType("text");

                    b.Property<long?>("TotalCashLimitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalCreditLimitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalCreditLineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalUnvestedBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalVestedBalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserClassification")
                        .HasColumnType("text");

                    b.Property<string>("ValuationType")
                        .HasColumnType("text");

                    b.Property<long>("YodleeDataExtractsAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("_401kLoanId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AmountDueId");

                    b.HasIndex("AnnuityBalanceId");

                    b.HasIndex("AvailableBalanceId");

                    b.HasIndex("AvailableCashId");

                    b.HasIndex("AvailableCreditId");

                    b.HasIndex("BalanceId");

                    b.HasIndex("CashId");

                    b.HasIndex("CashValueId");

                    b.HasIndex("CurrentBalanceId");

                    b.HasIndex("DataExtractUserDataId");

                    b.HasIndex("DeathBenefitId");

                    b.HasIndex("EscrowBalanceId");

                    b.HasIndex("FaceAmountId");

                    b.HasIndex("HomeValueId");

                    b.HasIndex("InterestPaidLastYearId");

                    b.HasIndex("InterestPaidYTDId");

                    b.HasIndex("LastEmployeeContributionAmountId");

                    b.HasIndex("LastPaymentAmountId");

                    b.HasIndex("LastPaymentId");

                    b.HasIndex("LoanPayoffAmountId");

                    b.HasIndex("LoanPayoffDetailsId");

                    b.HasIndex("MarginBalanceId");

                    b.HasIndex("MaturityAmountId");

                    b.HasIndex("MinimumAmountDueId");

                    b.HasIndex("MoneyMarketBalanceId");

                    b.HasIndex("OriginalLoanAmountId");

                    b.HasIndex("OverDraftLimitId");

                    b.HasIndex("PremiumId");

                    b.HasIndex("PrincipalBalanceId");

                    b.HasIndex("RecurringPaymentId");

                    b.HasIndex("RemainingBalanceId");

                    b.HasIndex("RunningBalanceId");

                    b.HasIndex("ShortBalanceId");

                    b.HasIndex("TotalCashLimitId");

                    b.HasIndex("TotalCreditLimitId");

                    b.HasIndex("TotalCreditLineId");

                    b.HasIndex("TotalUnvestedBalanceId");

                    b.HasIndex("TotalVestedBalanceId");

                    b.HasIndex("_401kLoanId");

                    b.ToTable("DataExtractAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractDataset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdditionalStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractProviderAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdateAttempt")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NextUpdateScheduled")
                        .HasColumnType("text");

                    b.Property<string>("UpdateEligibility")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataExtractAccountId");

                    b.HasIndex("DataExtractProviderAccountId");

                    b.ToTable("DataExtractDatasets");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractProviderAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AggregationSource")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractUserDataId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DestinationProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("OauthMigrationStatus")
                        .HasColumnType("text");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<List<int>>("SourceProviderAccountIds")
                        .HasColumnType("integer[]");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<long>("YodleeDataExtractsProviderAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataExtractUserDataId");

                    b.ToTable("DataExtractProviderAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataExtractUsers");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractUserData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalTransactionsCount")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("UserId");

                    b.ToTable("DataExtractUserDatas");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("AdditionalStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateAttempt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextUpdateScheduled")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ProviderAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateEligibility")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProviderAccountId");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Description", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Consumer")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Original")
                        .HasColumnType("text");

                    b.Property<string>("Security")
                        .HasColumnType("text");

                    b.Property<string>("Simple")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DetailCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DetailCategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("TransactionCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionCategoryId");

                    b.ToTable("DetailCategories");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Email", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("dataId")
                        .HasColumnType("bigint");

                    b.Property<string>("info")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("dataId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Field", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValueProvided")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<int>("MinLength")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<long?>("RowId")
                        .HasColumnType("bigint");

                    b.Property<string>("Suffix")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<bool>("ValueEditable")
                        .HasColumnType("boolean");

                    b.Property<int>("YodleeFieldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.FullAccountNumberList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("UnmaskedAccountNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FullAccountNumberLists");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("YoldeeHistoricalAccountId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HistoricalAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("AsOfDate")
                        .HasColumnType("text");

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DataSourceType")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsset")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetworthDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("NetworthDetailId");

                    b.ToTable("HistoricalBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalBalanceAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AsOfDate")
                        .HasColumnType("text");

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DataSourceType")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("HistoricalAccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAsset")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("HistoricalAccountId");

                    b.ToTable("HistoricalBalanceAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Ownership")
                        .HasColumnType("text");

                    b.Property<long?>("VerifiedAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.HasIndex("VerifiedAccountId");

                    b.ToTable("Holders");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long?>("AccruedIncomeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AccruedInterestId")
                        .HasColumnType("bigint");

                    b.Property<int>("ContractQuantity")
                        .HasColumnType("integer");

                    b.Property<long?>("CostBasisId")
                        .HasColumnType("bigint");

                    b.Property<int>("CouponRate")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CusipNumber")
                        .HasColumnType("text");

                    b.Property<long?>("DataExtractUserDataId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EnrichedDescription")
                        .HasColumnType("text");

                    b.Property<int>("ExercisedQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("text");

                    b.Property<string>("GrantDate")
                        .HasColumnType("text");

                    b.Property<string>("HoldingType")
                        .HasColumnType("text");

                    b.Property<long?>("HoldingsSummaryId")
                        .HasColumnType("bigint");

                    b.Property<int>("InterestRate")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShort")
                        .HasColumnType("boolean");

                    b.Property<string>("Isin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("MatchStatus")
                        .HasColumnType("text");

                    b.Property<string>("MaturityDate")
                        .HasColumnType("text");

                    b.Property<string>("OptionType")
                        .HasColumnType("text");

                    b.Property<long?>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStyle")
                        .HasColumnType("text");

                    b.Property<string>("SecurityType")
                        .HasColumnType("text");

                    b.Property<string>("Sedol")
                        .HasColumnType("text");

                    b.Property<long?>("SpreadId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StrikePriceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<string>("Term")
                        .HasColumnType("text");

                    b.Property<int>("UnvestedQuantity")
                        .HasColumnType("integer");

                    b.Property<long?>("UnvestedValueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueId")
                        .HasColumnType("bigint");

                    b.Property<int>("VestedQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("VestedSharesExercisable")
                        .HasColumnType("integer");

                    b.Property<long?>("VestedValueId")
                        .HasColumnType("bigint");

                    b.Property<string>("VestingDate")
                        .HasColumnType("text");

                    b.Property<int>("YodleeHoldingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccruedIncomeId");

                    b.HasIndex("AccruedInterestId");

                    b.HasIndex("CostBasisId");

                    b.HasIndex("DataExtractUserDataId");

                    b.HasIndex("HoldingsSummaryId");

                    b.HasIndex("PriceId");

                    b.HasIndex("SpreadId");

                    b.HasIndex("StrikePriceId");

                    b.HasIndex("UnvestedValueId");

                    b.HasIndex("ValueId");

                    b.HasIndex("VestedValueId");

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("HoldingsSummaryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("YodleeDerivedHoldingsAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HoldingsSummaryId");

                    b.HasIndex("ValueId");

                    b.ToTable("HoldingsAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClassificationType")
                        .HasColumnType("text");

                    b.Property<string>("ClassificationValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ValueId");

                    b.ToTable("HoldingsSummarys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Identifier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("HolderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HolderId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Identifiers");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Intermediary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IntermediaryValue")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("YodleeIntermediary");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Href")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodType")
                        .HasColumnType("text");

                    b.Property<string>("Rel")
                        .HasColumnType("text");

                    b.Property<long?>("UserDataId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserDataId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoanPayoffDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OutstandingBalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("PayByDate")
                        .HasColumnType("text");

                    b.Property<long?>("PayoffAmountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OutstandingBalanceId");

                    b.HasIndex("PayoffAmountId");

                    b.ToTable("LoanPayoffDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoginForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ForgetPasswordURL")
                        .HasColumnType("text");

                    b.Property<string>("FormType")
                        .HasColumnType("text");

                    b.Property<string>("Help")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginHelp")
                        .HasColumnType("text");

                    b.Property<string>("MfaInfoText")
                        .HasColumnType("text");

                    b.Property<string>("MfaInfoTitle")
                        .HasColumnType("text");

                    b.Property<int>("MfaTimeout")
                        .HasColumnType("integer");

                    b.Property<long?>("ProviderAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<int>("YodleeLoginFormId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderAccountId");

                    b.HasIndex("ProviderId");

                    b.ToTable("LoginForms");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Merchant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<List<string>>("CategoryLabel")
                        .HasColumnType("text[]");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoordinatesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.Property<string>("YodleeMerchantId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CoordinatesId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Name", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("First")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Last")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Middle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.NetworthDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LiabilityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NetworthId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("LiabilityId");

                    b.HasIndex("NetworthId");

                    b.ToTable("Networths");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.NotificationEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CallBackUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationEvent");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Preference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("DateFormat")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Principal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Principals");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProviderAccountProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.HasIndex("ProviderAccountProfileId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Provider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("AccountType")
                        .HasColumnType("text[]");

                    b.Property<List<int>>("AssociatedProviderIds")
                        .HasColumnType("integer[]");

                    b.Property<List<string>>("AuthParameter")
                        .HasColumnType("text[]");

                    b.Property<string>("AuthType")
                        .HasColumnType("text");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<string>("CountryISOCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Favicon")
                        .HasColumnType("text");

                    b.Property<string>("Help")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsAddedByUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsAutoRefreshEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsentRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguageISOCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginUrl")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PRIORITY")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryLanguageISOCode")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("YodleeProviderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AggregationSource")
                        .HasColumnType("text");

                    b.Property<int>("ConsentId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("OauthMigrationStatus")
                        .HasColumnType("text");

                    b.Property<long?>("PreferencesId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<long>("YodleeProviderAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PreferencesId");

                    b.ToTable("ProviderAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccountPreference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutoRefreshEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDataExtractsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("LinkedProviderAccountId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProviderAccountPreference");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccountProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("YodleeUserProfileDetailProviderAccountId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserProfileDetailProviderAccounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TotalId");

                    b.ToTable("ProviderCounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProvidersDataset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProviderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProvidersDatasets");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.PublicKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PublicKeys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RewardBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("BalanceToLevel")
                        .HasColumnType("text");

                    b.Property<string>("BalanceToReward")
                        .HasColumnType("text");

                    b.Property<string>("BalanceType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataExtractAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Units")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataExtractAccountId");

                    b.ToTable("RewardBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Row", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FieldRowChoice")
                        .HasColumnType("text");

                    b.Property<string>("Form")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LoginFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("YodleeRowId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LoginFormId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Rule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RuleClaus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Field")
                        .HasColumnType("text");

                    b.Property<string>("FieldValue")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Operation")
                        .HasColumnType("text");

                    b.Property<int>("RuleClauseId")
                        .HasColumnType("integer");

                    b.Property<long?>("TransactionCategorizationRuleId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserDefinedRuleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TransactionCategorizationRuleId");

                    b.ToTable("YodleeRuleClaus");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RuleClause", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Field")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Operation")
                        .HasColumnType("text");

                    b.Property<long?>("RuleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.ToTable("RuleClauses");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RunningBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("RunningBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Security", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccrualMethod")
                        .HasColumnType("text");

                    b.Property<int>("AgencyFactor")
                        .HasColumnType("integer");

                    b.Property<string>("CallDate")
                        .HasColumnType("text");

                    b.Property<int>("CallPrice")
                        .HasColumnType("integer");

                    b.Property<bool>("CdscFundFlag")
                        .HasColumnType("boolean");

                    b.Property<bool>("ClosedFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cusip")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("FederalTaxable")
                        .HasColumnType("boolean");

                    b.Property<string>("FirmEligible")
                        .HasColumnType("text");

                    b.Property<string>("FirstCouponDate")
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<string>("FundFamily")
                        .HasColumnType("text");

                    b.Property<string>("GicsSector")
                        .HasColumnType("text");

                    b.Property<string>("IncomeCurrency")
                        .HasColumnType("text");

                    b.Property<int>("InterestRate")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDummySecurity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnvestnetDummySecurity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSyntheticSecurity")
                        .HasColumnType("boolean");

                    b.Property<string>("Isin")
                        .HasColumnType("text");

                    b.Property<string>("IssueDate")
                        .HasColumnType("text");

                    b.Property<int>("IssueTypeMultiplier")
                        .HasColumnType("integer");

                    b.Property<string>("LastCouponDate")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedDate")
                        .HasColumnType("text");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaturityDate")
                        .HasColumnType("text");

                    b.Property<int>("MinimumPurchase")
                        .HasColumnType("integer");

                    b.Property<string>("MoodyRating")
                        .HasColumnType("text");

                    b.Property<string>("SAndPRating")
                        .HasColumnType("text");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<string>("Sedol")
                        .HasColumnType("text");

                    b.Property<string>("ShareClass")
                        .HasColumnType("text");

                    b.Property<bool>("StateTaxable")
                        .HasColumnType("boolean");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.Property<string>("SubSector")
                        .HasColumnType("text");

                    b.Property<string>("TradeCurrencyCode")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("YodleeSecurityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Security");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.SecurityHolding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SecurityId")
                        .HasColumnType("bigint");

                    b.Property<string>("YodleeSecurityHoldingId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SecurityId");

                    b.ToTable("SecurityHoldings");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Statement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AmountDueId")
                        .HasColumnType("bigint");

                    b.Property<long>("Apr")
                        .HasColumnType("bigint");

                    b.Property<string>("BillingPeriodEnd")
                        .HasColumnType("text");

                    b.Property<string>("BillingPeriodStart")
                        .HasColumnType("text");

                    b.Property<long?>("CashAdvanceId")
                        .HasColumnType("bigint");

                    b.Property<long>("CashApr")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<long?>("InterestAmountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastPaymentAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastPaymentDate")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<long?>("LoanBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinimumPaymentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NewChargesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrincipalAmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("StatementDate")
                        .HasColumnType("text");

                    b.Property<long>("YodleeStatementId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AmountDueId");

                    b.HasIndex("CashAdvanceId");

                    b.HasIndex("InterestAmountId");

                    b.HasIndex("LastPaymentAmountId");

                    b.HasIndex("LoanBalanceId");

                    b.HasIndex("MinimumPaymentId");

                    b.HasIndex("NewChargesId");

                    b.HasIndex("PrincipalAmountId");

                    b.ToTable("YodleeStatements");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.StockExchangeDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExchangeCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SecurityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SecurityId");

                    b.ToTable("StockExchangeDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Summary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreditTotalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DebitTotalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LinksId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionsSummaryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreditTotalId");

                    b.HasIndex("DebitTotalId");

                    b.HasIndex("LinksId");

                    b.HasIndex("TransactionsSummaryId");

                    b.ToTable("Summarys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.SummaryDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreditTotalId")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DebitTotalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SummaryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreditTotalId");

                    b.HasIndex("DebitTotalId");

                    b.HasIndex("SummaryId");

                    b.ToTable("SummaryDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Total", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Totals");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long?>("AmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("BaseType")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CategorySource")
                        .HasColumnType("text");

                    b.Property<string>("CategoryType")
                        .HasColumnType("text");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("text");

                    b.Property<long?>("CommissionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CusIpNumber")
                        .HasColumnType("text");

                    b.Property<long?>("DataExtractUserDataId")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DescriptionId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetailCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("HighLevelCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("HoldingDescription")
                        .HasColumnType("text");

                    b.Property<long?>("InterestId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<string>("Isin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<long?>("MerchantId")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("PostDate")
                        .HasColumnType("text");

                    b.Property<long?>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrincipalId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long?>("RunningBalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SeDol")
                        .HasColumnType("text");

                    b.Property<string>("SettleDate")
                        .HasColumnType("text");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("SubType")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<long?>("TransactionCriteriaId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionDate")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Valoren")
                        .HasColumnType("text");

                    b.Property<long>("YodleeTransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AmountId");

                    b.HasIndex("CommissionId");

                    b.HasIndex("DataExtractUserDataId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("InterestId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("PriceId");

                    b.HasIndex("PrincipalId");

                    b.HasIndex("RunningBalanceId");

                    b.HasIndex("TransactionCriteriaId");

                    b.ToTable("YodleeTransactions");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCategorizationRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryLevelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MemId")
                        .HasColumnType("integer");

                    b.Property<int>("RulePriority")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionCategorizationId")
                        .HasColumnType("integer");

                    b.Property<int>("UserDefinedRuleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TransactionCategorizationRules");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DefaultCategoryName")
                        .HasColumnType("text");

                    b.Property<string>("DefaultHighLevelCategoryName")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HighLevelCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("HighLevelCategoryName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("YodleeTransactionCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TransactionCategories");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCriteria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BaseType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("DateVariance")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Keyword")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Matched")
                        .HasColumnType("text");

                    b.Property<long?>("VerifyAccountDTOId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VerifyAccountDTOId");

                    b.ToTable("TransactionCriterias");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionsLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Transactions")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionsLinks");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionsSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoryType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreditTotalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DebitTotalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LinksId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreditTotalId");

                    b.HasIndex("DebitTotalId");

                    b.HasIndex("LinksId");

                    b.ToTable("TransactionsSummarys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateAccountDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountStatus")
                        .HasColumnType("text");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AmountDueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Container")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<long?>("HomeValueId")
                        .HasColumnType("bigint");

                    b.Property<string>("IncludeInNetWorth")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Is_E_billEnrolled")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AmountDueId");

                    b.HasIndex("BalanceId");

                    b.HasIndex("HomeValueId");

                    b.ToTable("UpdateAccountDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("Container")
                        .HasColumnType("text[]");

                    b.Property<long?>("ContainerAttributesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("UpdateProviderAccountDataSetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainerAttributesId");

                    b.HasIndex("UpdateProviderAccountDataSetId");

                    b.ToTable("UpdateProviderAccountAttributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountDataSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UpdateProviderAccountDataSets");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("YodleeUpdateProviderAccountFieldsId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UpdateProviderAccountFields");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UserData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDatas");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginName")
                        .HasColumnType("text");

                    b.Property<long?>("NameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PreferencesId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleType")
                        .HasColumnType("text");

                    b.Property<string>("SegmentName")
                        .HasColumnType("text");

                    b.Property<long>("YodleeUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NameId");

                    b.HasIndex("PreferencesId");

                    b.ToTable("YodleeUser");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerificationAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<long?>("BankTransferCodeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BankTransferCodeId");

                    b.ToTable("YodleeVerificationAccount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Verifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProviderAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("RemainingAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationDate")
                        .HasColumnType("text");

                    b.Property<string>("VerificationStatus")
                        .HasColumnType("text");

                    b.Property<string>("VerificationType")
                        .HasColumnType("text");

                    b.Property<long>("YodleeVerificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("YodleeVerification");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifiedAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<long?>("AvailableBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("CONTAINER")
                        .HasColumnType("text");

                    b.Property<long?>("CashId")
                        .HasColumnType("bigint");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentBalanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayedName")
                        .HasColumnType("text");

                    b.Property<string>("FailedReason")
                        .HasColumnType("text");

                    b.Property<long?>("FullAccountNumberListId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<string>("VerificationStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvailableBalanceId");

                    b.HasIndex("BalanceId");

                    b.HasIndex("CashId");

                    b.HasIndex("CurrentBalanceId");

                    b.HasIndex("FullAccountNumberListId");

                    b.ToTable("YodleeVerifiedAccount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifyAccountDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("VerifyAccountDTOs");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifyAccountTransactionCriteria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BaseType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("DateVariance")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Keyword")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("VerifyAccountTransactionCriterias");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.YodleeAmount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<long?>("CoverageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LimitType")
                        .HasColumnType("text");

                    b.Property<long?>("MetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UnitType")
                        .HasColumnType("text");

                    b.Property<long?>("coverId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CoverageId");

                    b.HasIndex("MetId");

                    b.HasIndex("coverId");

                    b.ToTable("YodleeAmounts");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Model.Authorizations.YodleeAccessToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("YodleeWrapperIntegrationAuthTokens");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Model.Authorizations.YodleeApiKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("YodleeWrapperIntegrationApiKeys");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Model.Configurations.YodleeConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.Property<string>("AdminUsername")
                        .HasColumnType("text");

                    b.Property<string>("ApiVersion")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProviderAccountId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("YodleeWrapperIntegrationConfigurations");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Model.RequestLog.RequestLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Endpoint")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<string>("ReasonPhrase")
                        .HasColumnType("text");

                    b.Property<string>("Request")
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("YodleeWrapperIntegrationRequestLog");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Account", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableBalance")
                        .WithMany()
                        .HasForeignKey("AvailableBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableCash")
                        .WithMany()
                        .HasForeignKey("AvailableCashId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableCredit")
                        .WithMany()
                        .HasForeignKey("AvailableCreditId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Cash")
                        .WithMany()
                        .HasForeignKey("CashId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CurrentBalance")
                        .WithMany()
                        .HasForeignKey("CurrentBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastEmployeeContributionAmount")
                        .WithMany()
                        .HasForeignKey("LastEmployeeContributionAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastPaymentAmount")
                        .WithMany()
                        .HasForeignKey("LastPaymentAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MarginBalance")
                        .WithMany()
                        .HasForeignKey("MarginBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MinimumAmountDue")
                        .WithMany()
                        .HasForeignKey("MinimumAmountDueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "OriginalLoanAmount")
                        .WithMany()
                        .HasForeignKey("OriginalLoanAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "PrincipalBalance")
                        .WithMany()
                        .HasForeignKey("PrincipalBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RunningBalance")
                        .WithMany()
                        .HasForeignKey("RunningBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCashLimit")
                        .WithMany()
                        .HasForeignKey("TotalCashLimitId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCreditLine")
                        .WithMany()
                        .HasForeignKey("TotalCreditLineId");

                    b.HasOne("YodleeIntegration.Domain.Entities.VerifyAccountDTO", null)
                        .WithMany("Account")
                        .HasForeignKey("VerifyAccountDTOId");

                    b.Navigation("AmountDue");

                    b.Navigation("AvailableBalance");

                    b.Navigation("AvailableCash");

                    b.Navigation("AvailableCredit");

                    b.Navigation("Balance");

                    b.Navigation("Cash");

                    b.Navigation("CurrentBalance");

                    b.Navigation("LastEmployeeContributionAmount");

                    b.Navigation("LastPaymentAmount");

                    b.Navigation("MarginBalance");

                    b.Navigation("MinimumAmountDue");

                    b.Navigation("OriginalLoanAmount");

                    b.Navigation("PrincipalBalance");

                    b.Navigation("RunningBalance");

                    b.Navigation("TotalCashLimit");

                    b.Navigation("TotalCreditLine");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AccountBalance", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableBalance")
                        .WithMany()
                        .HasForeignKey("AvailableBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Cash")
                        .WithMany()
                        .HasForeignKey("CashId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CurrentBalance")
                        .WithMany()
                        .HasForeignKey("CurrentBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalBalance")
                        .WithMany()
                        .HasForeignKey("TotalBalanceId");

                    b.Navigation("AvailableBalance");

                    b.Navigation("Balance");

                    b.Navigation("Cash");

                    b.Navigation("CurrentBalance");

                    b.Navigation("TotalBalance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AddManualAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "HomeValue")
                        .WithMany()
                        .HasForeignKey("HomeValueId");

                    b.Navigation("Address");

                    b.Navigation("AmountDue");

                    b.Navigation("Balance");

                    b.Navigation("HomeValue");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Address", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Profile", null)
                        .WithMany("Address")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.AssetClassification", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Holding", null)
                        .WithMany("AssetClassification")
                        .HasForeignKey("HoldingId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Attribute", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.ContainerAttribute", "ContainerAttributes")
                        .WithMany()
                        .HasForeignKey("ContainerAttributesId");

                    b.HasOne("YodleeIntegration.Domain.Entities.ProvidersDataset", null)
                        .WithMany("Attribute")
                        .HasForeignKey("ProvidersDatasetId");

                    b.Navigation("ContainerAttributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.BankTransferCode", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Account", null)
                        .WithMany("BankTransferCode")
                        .HasForeignKey("AccountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractAccount", null)
                        .WithMany("BankTransferCode")
                        .HasForeignKey("DataExtractAccountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.VerifiedAccount", null)
                        .WithMany("BankTransferCode")
                        .HasForeignKey("VerifiedAccountId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Capability", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Provider", null)
                        .WithMany("Capability")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ContainerAttribute", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Bank", "BANK")
                        .WithMany()
                        .HasForeignKey("BANKId");

                    b.HasOne("YodleeIntegration.Domain.Entities.CardDetail", "CREDITCARD")
                        .WithMany()
                        .HasForeignKey("CREDITCARDId");

                    b.HasOne("YodleeIntegration.Domain.Entities.CardDetail", "INSURANCE")
                        .WithMany()
                        .HasForeignKey("INSURANCEId");

                    b.HasOne("YodleeIntegration.Domain.Entities.CardDetail", "INVESTMENT")
                        .WithMany()
                        .HasForeignKey("INVESTMENTId");

                    b.HasOne("YodleeIntegration.Domain.Entities.CardDetail", "LOAN")
                        .WithMany()
                        .HasForeignKey("LOANId");

                    b.Navigation("BANK");

                    b.Navigation("CREDITCARD");

                    b.Navigation("INSURANCE");

                    b.Navigation("INVESTMENT");

                    b.Navigation("LOAN");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Coverage", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractAccount", null)
                        .WithMany("Coverage")
                        .HasForeignKey("DataExtractAccountId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AnnuityBalance")
                        .WithMany()
                        .HasForeignKey("AnnuityBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableBalance")
                        .WithMany()
                        .HasForeignKey("AvailableBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableCash")
                        .WithMany()
                        .HasForeignKey("AvailableCashId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableCredit")
                        .WithMany()
                        .HasForeignKey("AvailableCreditId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Cash")
                        .WithMany()
                        .HasForeignKey("CashId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CashValue")
                        .WithMany()
                        .HasForeignKey("CashValueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CurrentBalance")
                        .WithMany()
                        .HasForeignKey("CurrentBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUserData", null)
                        .WithMany("Account")
                        .HasForeignKey("DataExtractUserDataId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "DeathBenefit")
                        .WithMany()
                        .HasForeignKey("DeathBenefitId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "EscrowBalance")
                        .WithMany()
                        .HasForeignKey("EscrowBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "FaceAmount")
                        .WithMany()
                        .HasForeignKey("FaceAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "HomeValue")
                        .WithMany()
                        .HasForeignKey("HomeValueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "InterestPaidLastYear")
                        .WithMany()
                        .HasForeignKey("InterestPaidLastYearId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "InterestPaidYTD")
                        .WithMany()
                        .HasForeignKey("InterestPaidYTDId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastEmployeeContributionAmount")
                        .WithMany()
                        .HasForeignKey("LastEmployeeContributionAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastPaymentAmount")
                        .WithMany()
                        .HasForeignKey("LastPaymentAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastPayment")
                        .WithMany()
                        .HasForeignKey("LastPaymentId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LoanPayoffAmount")
                        .WithMany()
                        .HasForeignKey("LoanPayoffAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.LoanPayoffDetails", "LoanPayoffDetails")
                        .WithMany()
                        .HasForeignKey("LoanPayoffDetailsId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MarginBalance")
                        .WithMany()
                        .HasForeignKey("MarginBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MaturityAmount")
                        .WithMany()
                        .HasForeignKey("MaturityAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MinimumAmountDue")
                        .WithMany()
                        .HasForeignKey("MinimumAmountDueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MoneyMarketBalance")
                        .WithMany()
                        .HasForeignKey("MoneyMarketBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "OriginalLoanAmount")
                        .WithMany()
                        .HasForeignKey("OriginalLoanAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "OverDraftLimit")
                        .WithMany()
                        .HasForeignKey("OverDraftLimitId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Premium")
                        .WithMany()
                        .HasForeignKey("PremiumId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "PrincipalBalance")
                        .WithMany()
                        .HasForeignKey("PrincipalBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RecurringPayment")
                        .WithMany()
                        .HasForeignKey("RecurringPaymentId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RemainingBalance")
                        .WithMany()
                        .HasForeignKey("RemainingBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RunningBalance")
                        .WithMany()
                        .HasForeignKey("RunningBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "ShortBalance")
                        .WithMany()
                        .HasForeignKey("ShortBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCashLimit")
                        .WithMany()
                        .HasForeignKey("TotalCashLimitId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCreditLimit")
                        .WithMany()
                        .HasForeignKey("TotalCreditLimitId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalCreditLine")
                        .WithMany()
                        .HasForeignKey("TotalCreditLineId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalUnvestedBalance")
                        .WithMany()
                        .HasForeignKey("TotalUnvestedBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "TotalVestedBalance")
                        .WithMany()
                        .HasForeignKey("TotalVestedBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "_401kLoan")
                        .WithMany()
                        .HasForeignKey("_401kLoanId");

                    b.Navigation("_401kLoan");

                    b.Navigation("Address");

                    b.Navigation("AmountDue");

                    b.Navigation("AnnuityBalance");

                    b.Navigation("AvailableBalance");

                    b.Navigation("AvailableCash");

                    b.Navigation("AvailableCredit");

                    b.Navigation("Balance");

                    b.Navigation("Cash");

                    b.Navigation("CashValue");

                    b.Navigation("CurrentBalance");

                    b.Navigation("DeathBenefit");

                    b.Navigation("EscrowBalance");

                    b.Navigation("FaceAmount");

                    b.Navigation("HomeValue");

                    b.Navigation("InterestPaidLastYear");

                    b.Navigation("InterestPaidYTD");

                    b.Navigation("LastEmployeeContributionAmount");

                    b.Navigation("LastPayment");

                    b.Navigation("LastPaymentAmount");

                    b.Navigation("LoanPayoffAmount");

                    b.Navigation("LoanPayoffDetails");

                    b.Navigation("MarginBalance");

                    b.Navigation("MaturityAmount");

                    b.Navigation("MinimumAmountDue");

                    b.Navigation("MoneyMarketBalance");

                    b.Navigation("OriginalLoanAmount");

                    b.Navigation("OverDraftLimit");

                    b.Navigation("Premium");

                    b.Navigation("PrincipalBalance");

                    b.Navigation("RecurringPayment");

                    b.Navigation("RemainingBalance");

                    b.Navigation("RunningBalance");

                    b.Navigation("ShortBalance");

                    b.Navigation("TotalCashLimit");

                    b.Navigation("TotalCreditLimit");

                    b.Navigation("TotalCreditLine");

                    b.Navigation("TotalUnvestedBalance");

                    b.Navigation("TotalVestedBalance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractDataset", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractAccount", null)
                        .WithMany("Dataset")
                        .HasForeignKey("DataExtractAccountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractProviderAccount", null)
                        .WithMany("Dataset")
                        .HasForeignKey("DataExtractProviderAccountId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractProviderAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUserData", null)
                        .WithMany("ProviderAccount")
                        .HasForeignKey("DataExtractUserDataId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractUserData", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Data", null)
                        .WithMany("UserData")
                        .HasForeignKey("DataId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataSet", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Account", null)
                        .WithMany("DataSet")
                        .HasForeignKey("AccountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.ProviderAccount", null)
                        .WithMany("DataSet")
                        .HasForeignKey("ProviderAccountId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DetailCategory", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionCategory", null)
                        .WithMany("DetailCategory")
                        .HasForeignKey("TransactionCategoryId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Email", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Profile", null)
                        .WithMany("Email")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Event", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Data", "data")
                        .WithMany()
                        .HasForeignKey("dataId");

                    b.Navigation("data");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Field", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Row", null)
                        .WithMany("Field")
                        .HasForeignKey("RowId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalBalance", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.NetworthDetail", null)
                        .WithMany("HistoricalBalances")
                        .HasForeignKey("NetworthDetailId");

                    b.Navigation("Balance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalBalanceAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.HistoricalAccount", null)
                        .WithMany("HistoricalBalances")
                        .HasForeignKey("HistoricalAccountId");

                    b.Navigation("Balance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holder", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.HasOne("YodleeIntegration.Domain.Entities.VerifiedAccount", null)
                        .WithMany("Holder")
                        .HasForeignKey("VerifiedAccountId");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holding", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AccruedIncome")
                        .WithMany()
                        .HasForeignKey("AccruedIncomeId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AccruedInterest")
                        .WithMany()
                        .HasForeignKey("AccruedInterestId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CostBasis")
                        .WithMany()
                        .HasForeignKey("CostBasisId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUserData", null)
                        .WithMany("Holding")
                        .HasForeignKey("DataExtractUserDataId");

                    b.HasOne("YodleeIntegration.Domain.Entities.HoldingsSummary", null)
                        .WithMany("Holding")
                        .HasForeignKey("HoldingsSummaryId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Spread")
                        .WithMany()
                        .HasForeignKey("SpreadId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "StrikePrice")
                        .WithMany()
                        .HasForeignKey("StrikePriceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "UnvestedValue")
                        .WithMany()
                        .HasForeignKey("UnvestedValueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "VestedValue")
                        .WithMany()
                        .HasForeignKey("VestedValueId");

                    b.Navigation("AccruedIncome");

                    b.Navigation("AccruedInterest");

                    b.Navigation("CostBasis");

                    b.Navigation("Price");

                    b.Navigation("Spread");

                    b.Navigation("StrikePrice");

                    b.Navigation("UnvestedValue");

                    b.Navigation("Value");

                    b.Navigation("VestedValue");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.HoldingsSummary", null)
                        .WithMany("Account")
                        .HasForeignKey("HoldingsSummaryId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsSummary", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Identifier", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Holder", null)
                        .WithMany("Identifier")
                        .HasForeignKey("HolderId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Profile", null)
                        .WithMany("Identifier")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Intermediary", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Transaction", null)
                        .WithMany("Intermediaries")
                        .HasForeignKey("TransactionId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Link", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.UserData", null)
                        .WithMany("Links")
                        .HasForeignKey("UserDataId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoanPayoffDetails", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "OutstandingBalance")
                        .WithMany()
                        .HasForeignKey("OutstandingBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "PayoffAmount")
                        .WithMany()
                        .HasForeignKey("PayoffAmountId");

                    b.Navigation("OutstandingBalance");

                    b.Navigation("PayoffAmount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoginForm", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.ProviderAccount", null)
                        .WithMany("LoginForm")
                        .HasForeignKey("ProviderAccountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Provider", null)
                        .WithMany("LoginForm")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Merchant", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Coordinates", "Coordinates")
                        .WithMany()
                        .HasForeignKey("CoordinatesId");

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.NetworthDetail", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Liability")
                        .WithMany()
                        .HasForeignKey("LiabilityId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Networth")
                        .WithMany()
                        .HasForeignKey("NetworthId");

                    b.Navigation("Asset");

                    b.Navigation("Liability");

                    b.Navigation("Networth");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Profile", null)
                        .WithMany("PhoneNumber")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Profile", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.HasOne("YodleeIntegration.Domain.Entities.ProviderAccountProfile", null)
                        .WithMany("Profile")
                        .HasForeignKey("ProviderAccountProfileId");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.ProviderAccountPreference", "Preferences")
                        .WithMany()
                        .HasForeignKey("PreferencesId");

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderCount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Total", "Total")
                        .WithMany()
                        .HasForeignKey("TotalId");

                    b.Navigation("Total");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProvidersDataset", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Provider", null)
                        .WithMany("Dataset")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RewardBalance", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractAccount", null)
                        .WithMany("RewardBalance")
                        .HasForeignKey("DataExtractAccountId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Row", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.LoginForm", null)
                        .WithMany("Row")
                        .HasForeignKey("LoginFormId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RuleClaus", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionCategorizationRule", null)
                        .WithMany("RuleClauses")
                        .HasForeignKey("TransactionCategorizationRuleId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.RuleClause", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Rule", null)
                        .WithMany("RuleClause")
                        .HasForeignKey("RuleId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.SecurityHolding", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Security", "Security")
                        .WithMany()
                        .HasForeignKey("SecurityId");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Statement", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CashAdvance")
                        .WithMany()
                        .HasForeignKey("CashAdvanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "InterestAmount")
                        .WithMany()
                        .HasForeignKey("InterestAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LastPaymentAmount")
                        .WithMany()
                        .HasForeignKey("LastPaymentAmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "LoanBalance")
                        .WithMany()
                        .HasForeignKey("LoanBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "MinimumPayment")
                        .WithMany()
                        .HasForeignKey("MinimumPaymentId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "NewCharges")
                        .WithMany()
                        .HasForeignKey("NewChargesId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "PrincipalAmount")
                        .WithMany()
                        .HasForeignKey("PrincipalAmountId");

                    b.Navigation("AmountDue");

                    b.Navigation("CashAdvance");

                    b.Navigation("InterestAmount");

                    b.Navigation("LastPaymentAmount");

                    b.Navigation("LoanBalance");

                    b.Navigation("MinimumPayment");

                    b.Navigation("NewCharges");

                    b.Navigation("PrincipalAmount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.StockExchangeDetail", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Security", null)
                        .WithMany("StockExchangeDetails")
                        .HasForeignKey("SecurityId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Summary", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CreditTotal")
                        .WithMany()
                        .HasForeignKey("CreditTotalId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "DebitTotal")
                        .WithMany()
                        .HasForeignKey("DebitTotalId");

                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionsLink", "Links")
                        .WithMany()
                        .HasForeignKey("LinksId");

                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionsSummary", null)
                        .WithMany("CategorySummary")
                        .HasForeignKey("TransactionsSummaryId");

                    b.Navigation("CreditTotal");

                    b.Navigation("DebitTotal");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.SummaryDetails", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CreditTotal")
                        .WithMany()
                        .HasForeignKey("CreditTotalId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "DebitTotal")
                        .WithMany()
                        .HasForeignKey("DebitTotalId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Summary", null)
                        .WithMany("Details")
                        .HasForeignKey("SummaryId");

                    b.Navigation("CreditTotal");

                    b.Navigation("DebitTotal");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Commission")
                        .WithMany()
                        .HasForeignKey("CommissionId");

                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUserData", null)
                        .WithMany("Transaction")
                        .HasForeignKey("DataExtractUserDataId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Description", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Interest")
                        .WithMany()
                        .HasForeignKey("InterestId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Principal", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "RunningBalance")
                        .WithMany()
                        .HasForeignKey("RunningBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionCriteria", null)
                        .WithMany("VerifiedTransaction")
                        .HasForeignKey("TransactionCriteriaId");

                    b.Navigation("Amount");

                    b.Navigation("Commission");

                    b.Navigation("Description");

                    b.Navigation("Interest");

                    b.Navigation("Merchant");

                    b.Navigation("Price");

                    b.Navigation("Principal");

                    b.Navigation("RunningBalance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCriteria", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.VerifyAccountDTO", null)
                        .WithMany("TransactionCriteria")
                        .HasForeignKey("VerifyAccountDTOId");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionsSummary", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CreditTotal")
                        .WithMany()
                        .HasForeignKey("CreditTotalId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "DebitTotal")
                        .WithMany()
                        .HasForeignKey("DebitTotalId");

                    b.HasOne("YodleeIntegration.Domain.Entities.TransactionsLink", "Links")
                        .WithMany()
                        .HasForeignKey("LinksId");

                    b.Navigation("CreditTotal");

                    b.Navigation("DebitTotal");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateAccountDetails", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AmountDue")
                        .WithMany()
                        .HasForeignKey("AmountDueId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "HomeValue")
                        .WithMany()
                        .HasForeignKey("HomeValueId");

                    b.Navigation("Address");

                    b.Navigation("AmountDue");

                    b.Navigation("Balance");

                    b.Navigation("HomeValue");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountAttribute", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.ContainerAttribute", "ContainerAttributes")
                        .WithMany()
                        .HasForeignKey("ContainerAttributesId");

                    b.HasOne("YodleeIntegration.Domain.Entities.UpdateProviderAccountDataSet", null)
                        .WithMany("Attribute")
                        .HasForeignKey("UpdateProviderAccountDataSetId");

                    b.Navigation("ContainerAttributes");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UserData", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.DataExtractUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Users", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.HasOne("YodleeIntegration.Domain.Entities.Preference", "Preferences")
                        .WithMany()
                        .HasForeignKey("PreferencesId");

                    b.Navigation("Address");

                    b.Navigation("Name");

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerificationAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.BankTransferCode", "BankTransferCode")
                        .WithMany()
                        .HasForeignKey("BankTransferCodeId");

                    b.Navigation("BankTransferCode");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Verifications", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.VerificationAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifiedAccount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "AvailableBalance")
                        .WithMany()
                        .HasForeignKey("AvailableBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Cash")
                        .WithMany()
                        .HasForeignKey("CashId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "CurrentBalance")
                        .WithMany()
                        .HasForeignKey("CurrentBalanceId");

                    b.HasOne("YodleeIntegration.Domain.Entities.FullAccountNumberList", "FullAccountNumberList")
                        .WithMany()
                        .HasForeignKey("FullAccountNumberListId");

                    b.Navigation("AvailableBalance");

                    b.Navigation("Balance");

                    b.Navigation("Cash");

                    b.Navigation("CurrentBalance");

                    b.Navigation("FullAccountNumberList");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.YodleeAmount", b =>
                {
                    b.HasOne("YodleeIntegration.Domain.Entities.Coverage", null)
                        .WithMany("Amount")
                        .HasForeignKey("CoverageId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "Met")
                        .WithMany()
                        .HasForeignKey("MetId");

                    b.HasOne("YodleeIntegration.Domain.Entities.RunningBalance", "cover")
                        .WithMany()
                        .HasForeignKey("coverId");

                    b.Navigation("cover");

                    b.Navigation("Met");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Account", b =>
                {
                    b.Navigation("BankTransferCode");

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Coverage", b =>
                {
                    b.Navigation("Amount");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Data", b =>
                {
                    b.Navigation("UserData");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractAccount", b =>
                {
                    b.Navigation("BankTransferCode");

                    b.Navigation("Coverage");

                    b.Navigation("Dataset");

                    b.Navigation("RewardBalance");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractProviderAccount", b =>
                {
                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.DataExtractUserData", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Holding");

                    b.Navigation("ProviderAccount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HistoricalAccount", b =>
                {
                    b.Navigation("HistoricalBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holder", b =>
                {
                    b.Navigation("Identifier");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Holding", b =>
                {
                    b.Navigation("AssetClassification");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.HoldingsSummary", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Holding");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.LoginForm", b =>
                {
                    b.Navigation("Row");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.NetworthDetail", b =>
                {
                    b.Navigation("HistoricalBalances");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Profile", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Email");

                    b.Navigation("Identifier");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Provider", b =>
                {
                    b.Navigation("Capability");

                    b.Navigation("Dataset");

                    b.Navigation("LoginForm");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccount", b =>
                {
                    b.Navigation("DataSet");

                    b.Navigation("LoginForm");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProviderAccountProfile", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.ProvidersDataset", b =>
                {
                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Row", b =>
                {
                    b.Navigation("Field");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Rule", b =>
                {
                    b.Navigation("RuleClause");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Security", b =>
                {
                    b.Navigation("StockExchangeDetails");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Summary", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Intermediaries");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCategorizationRule", b =>
                {
                    b.Navigation("RuleClauses");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCategory", b =>
                {
                    b.Navigation("DetailCategory");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionCriteria", b =>
                {
                    b.Navigation("VerifiedTransaction");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.TransactionsSummary", b =>
                {
                    b.Navigation("CategorySummary");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UpdateProviderAccountDataSet", b =>
                {
                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.UserData", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifiedAccount", b =>
                {
                    b.Navigation("BankTransferCode");

                    b.Navigation("Holder");
                });

            modelBuilder.Entity("YodleeIntegration.Domain.Entities.VerifyAccountDTO", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("TransactionCriteria");
                });
#pragma warning restore 612, 618
        }
    }
}
